---
interface Props {
  breadcrumbs: Array<{
    label: string; // 这里label将作为key
    href?: string;
  }>;
  lang?: string; // 可选的语言参数
}

const { breadcrumbs, lang: propLang } = Astro.props;
const lang = propLang || Astro.params?.lang || 'en';

// 动态导入对应语言的面包屑翻译
type BreadcrumbDict = Record<string, string>;
let t: BreadcrumbDict = {};

try {
  // 尝试加载指定语言的翻译文件
  t = await import(`../../../i18n/locales/${lang}/breadcrumb.json`).then(m => m.default as BreadcrumbDict);
} catch (e) {
  try {
    // 如果指定语言加载失败，尝试加载英文作为fallback
    t = await import(`../../../i18n/locales/en/breadcrumb.json`).then(m => m.default as BreadcrumbDict);
  } catch (fallbackError) {
    // 如果连英文也加载失败，使用空对象
    t = {};
  }
}

// 安全的翻译函数
const translate = (key: string, fallback?: string): string => {
  return t?.[key] || fallback || key;
};

// 生成面包屑导航的aria-label
const generateAriaLabel = (): string => {
  const homeText = translate('home', 'Home');
  return `${homeText} navigation`;
};
---

<nav aria-label={generateAriaLabel()} class="breadcrumb">
  <ol class="flex items-center space-x-2 text-xl">
    {breadcrumbs && breadcrumbs.map((crumb, index) => (
      <li class="flex items-center">
        {index > 0 && (
          <svg class="w-6 h-6 text-gray-400 mx-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
          </svg>
        )}
        {crumb.href ? (
          <a 
            href={crumb.href} 
            class="text-gray-600 hover:text-red-600 transition-colors duration-200 flex items-center"
          >
            {crumb.label === 'home' ? (
              <>
                <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"/>
                </svg>
                {translate(crumb.label, crumb.label)}
              </>
            ) : (
              translate(crumb.label, crumb.label)
            )}
          </a>
        ) : (
          <span class="text-gray-900 font-medium flex items-center">
            {crumb.label === 'home' ? (
              <>
                <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"/>
                </svg>
                {translate(crumb.label, crumb.label)}
              </>
            ) : (
              translate(crumb.label, crumb.label)
            )}
          </span>
        )}
      </li>
    ))}
  </ol>
</nav>

<style>
  .breadcrumb {
    @apply flex items-center text-gray-600;
    padding: 10px 0;
  }
  
  .breadcrumb a {
    @apply hover:underline;
  }
</style> 