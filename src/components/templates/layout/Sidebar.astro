---
import { getMenus } from '@apis/common.js';
import { generateUrl } from '@utils/tools.js';

type MenuSection = 'products' | 'news' | 'case' | 'about';
interface Props {
  currentSection?: MenuSection;
  lang: string;
}

const { currentSection, lang } = Astro.props;
const currentPath = Astro.url.pathname;

// 导入主题配置
import { themeConfig } from '@config/theme.js';

// 获取侧边栏配置
const sidebarConfig = themeConfig.layout.sidebar;

const menus = await getMenus(lang);

// 根据配置模式处理菜单项
const getProcessedMenuItems = () => {
  const { displayMode, fixedOrder, autoExpandCurrent } = sidebarConfig;
  
  // 过滤菜单项，只保留 path 字段中包含 MenuSection 的菜单项
  const validMenuSections: MenuSection[] = sidebarConfig.fixedOrder as MenuSection[];
  const filteredMenus = menus.filter(menu => {
    if (!menu?.path) return false;
    return validMenuSections.some(section => menu.path.includes(section));
  });

  // 为每个菜单项添加状态信息
  const allMenuItems = filteredMenus.map(menu => ({
    ...menu,
    isActive: menu?.path?.indexOf(currentSection) > -1 || false,
    defaultOpen: autoExpandCurrent && menu?.path?.indexOf(currentSection) > -1 || false
  }));

  switch (displayMode) {
    case 'current-top':
      // 当前菜单项置顶显示
      return [...allMenuItems].sort((a, b) => {
        const aContainsCurrent = a.path?.indexOf(currentSection) !== -1;
        const bContainsCurrent = b.path?.indexOf(currentSection) !== -1;
        
        // 如果a包含currentSection但b不包含，a排在前面
        if (aContainsCurrent && !bContainsCurrent) return -1;
        // 如果b包含currentSection但a不包含，b排在前面
        if (bContainsCurrent && !aContainsCurrent) return 1;
        // 如果都包含或都不包含，保持原顺序
        return 0;
      });

    case 'fixed-order':
      // 固定菜单顺序
      const orderedItems = [];
      const remainingItems = [...allMenuItems];
      
      // 按照固定顺序排列
      fixedOrder.forEach(id => {
        const item = remainingItems.find(item => item.path?.indexOf(id) !== -1);
        if (item) {
          orderedItems.push(item);
          remainingItems.splice(remainingItems.indexOf(item), 1);
        }
      });
      
      // 添加剩余项目
      orderedItems.push(...remainingItems);
      return orderedItems;
      
    case 'current-only':
      // 只显示当前模块菜单
      return allMenuItems.filter(item => item.path?.indexOf(currentSection) !== -1);
      
    default:
      return allMenuItems;
  }
};

const accordionMenus = getProcessedMenuItems();
---

<aside class="accordion-sidebar bg-white rounded-lg shadow-lg overflow-hidden">
  <!-- 手风琴菜单 -->
  <nav class="accordion-nav">
    {accordionMenus.map((menu) => (
      <div class="accordion-section" data-section={menu.path}>
        <div class={`accordion-header-wrapper ${menu.isActive ? 'active' : ''}`}>
          <!-- 可点击的标题链接区域 -->
          <a 
            href={generateUrl(lang, menu.path) || '#'}
            class="accordion-title-link"
          >
            <div class="flex items-center flex-1">
              <span class="text-2xl mr-3">{menu.icon}</span>
              <span class="font-medium">{menu.name}</span>
            </div>
          </a>
          
          <!-- 手风琴切换按钮 -->
          {menu.children.length > 0 && (
            <span class="accordion-count">({menu.children.length})</span>
            <button 
              class="accordion-toggle-btn"
              data-accordion-toggle={menu.path}
              aria-expanded={menu.defaultOpen ? 'true' : 'false'}
              aria-label={menu.name}
              type="button"
            >
              <svg 
                class="accordion-chevron w-6 h-6 transform transition-transform duration-200"
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          )}
        </div>
        
        <div 
          class={`accordion-content ${menu.defaultOpen ? 'accordion-open' : ''}`}
          data-accordion-content={menu.path}
        >
          <ul class="accordion-list">
            <!-- 子分类链接 -->
            {menu.children.map((item: any) => (
              <li>
                <a 
                  href={generateUrl(lang, menu.path, item.path)}
                  class={`accordion-link ${currentPath.indexOf(item.path) > -1 ? 'active' : ''}`}
                >
                  <span class="flex-1">{item.name}</span>
                  {item.children.length > 0 && (
                  <span class="accordion-count">({item.children.length})</span>
                  )}
                </a>
              </li>
            ))}
          </ul>
        </div>
      </div>
    ))}
  </nav>
</aside>

<script>
  // 简化的手风琴功能实现
  function initAccordion() {
    const accordionButtons = document.querySelectorAll('.accordion-toggle-btn');
    
    accordionButtons.forEach((button) => {
      button.addEventListener('click', function(event) {
        event.preventDefault();
        event.stopPropagation();
        
        const sectionId = this.getAttribute('data-accordion-toggle');
        
        if (!sectionId) return;
        
        const content = document.querySelector(`[data-accordion-content="${sectionId}"]`);
        const chevron = this.querySelector('.accordion-chevron');
        
        if (!content || !chevron) return;
        
        const isOpen = content.classList.contains('accordion-open');
        
        // 切换展开/折叠状态
        if (isOpen) {
          content.classList.remove('accordion-open');
          this.setAttribute('aria-expanded', 'false');
          chevron.style.transform = 'rotate(0deg)';
        } else {
          content.classList.add('accordion-open');
          this.setAttribute('aria-expanded', 'true');
          chevron.style.transform = 'rotate(180deg)';
        }
      });
    });
  }
  
  // 页面加载完成后初始化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAccordion);
  } else {
    initAccordion();
  }
</script>

<style>
  .accordion-sidebar {
    @apply sticky top-8;
    max-height: calc(100vh - 2rem);
    overflow-y: auto;
  }
  
  .accordion-section {
    @apply border-b border-gray-100 last:border-b-0;
  }
  
  .accordion-header-wrapper {
    @apply w-full flex items-center justify-between bg-white hover:bg-gray-50 transition-colors duration-200;
  }
  
  .accordion-header-wrapper.active {
    @apply bg-gray-100;
  }

  .accordion-title-link {
    @apply flex items-center flex-1 px-5 py-5 text-gray-800 hover:text-gray-700 font-medium text-xl text-left no-underline transition-colors duration-200;
  }
  
  .accordion-title-link:hover {
    @apply text-gray-700;
  }
  
  .accordion-toggle-btn {
    @apply flex items-center justify-center p-3 text-gray-400 hover:text-gray-600 cursor-pointer;
  }
  
  .accordion-toggle-btn:focus {
    @apply outline-none;
  }
  
  .accordion-chevron {
    @apply text-current flex-shrink-0;
  }
  
  .accordion-header-wrapper.active .accordion-chevron {
    @apply text-gray-600;
  }
  
  .accordion-content {
    @apply overflow-hidden transition-all duration-300;
    max-height: 0;
    opacity: 0;
  }
  
  .accordion-content.accordion-open {
    @apply opacity-100;
    max-height: 600px;
  }
  
  .accordion-list {
    @apply py-2 bg-gray-50;
  }
  
  .accordion-link {
    @apply flex items-center justify-between px-6 py-3 text-gray-600 hover:bg-white hover:text-gray-800 transition-colors duration-200 text-lg;
  }
  
  .accordion-link.active {
    @apply bg-white text-gray-800 font-medium;
  }
  
  .accordion-count {
    @apply text-sm text-gray-400 ml-2;
  }
  
  .accordion-link:hover .accordion-count {
    @apply text-gray-600;
  }
  
  .accordion-link.active .accordion-count {
    @apply text-gray-600;
  }
  
  /* 自定义滚动条 */
  .accordion-sidebar::-webkit-scrollbar {
    width: 6px;
  }
  
  .accordion-sidebar::-webkit-scrollbar-track {
    @apply bg-gray-100 rounded-full;
  }
  
  .accordion-sidebar::-webkit-scrollbar-thumb {
    @apply bg-gray-300 rounded-full;
  }
  
  .accordion-sidebar::-webkit-scrollbar-thumb:hover {
    @apply bg-gray-400;
  }
  
  /* 移动设备适配 */
  @media (max-width: 1024px) {
    .accordion-sidebar {
      @apply static mb-6;
      max-height: none;
    }
    
    .accordion-content.accordion-open {
      max-height: 400px;
    }
  }
  
  /* 动画效果 */
  .accordion-content.accordion-open {
    animation: slideDown 0.3s ease-out;
  }
  
  @keyframes slideDown {
    from {
      max-height: 0;
      opacity: 0;
    }
    to {
      max-height: 600px;
      opacity: 1;
    }
  }
  
  /* 响应式字体大小 */
  @media (max-width: 640px) {
    .accordion-title-link {
      @apply text-lg px-4 py-4;
    }
    
    .accordion-toggle-btn {
      @apply p-2;
    }
    
    .accordion-link {
      @apply text-base px-5 py-3;
    }
  }
</style> 