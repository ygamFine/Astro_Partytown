---
// 递归渲染 Strapi 富文本内容的组件
interface RichTextBlock {
  type: string;
  content?: string;
  children?: RichTextBlock[];
  level?: number;
  format?: string;
  url?: string;
  alt?: string;
  caption?: string;
  [key: string]: any;
}

interface Props {
  content: RichTextBlock[];
  className?: string;
}

const { content, className = "rich-text-content" } = Astro.props;
import { processImage } from "../../../lib/imageProcessor.js";
// 递归渲染富文本块
function renderBlock(block: RichTextBlock): string {
  const { type, content: textContent, children, level, format, url, alt, caption, text, bold, italic, underline, strikethrough, ...attrs } = block;
  
  // 处理文本内容
  let content = '';
  if (text) {
    content = text;
    // 应用文本格式
    if (bold) content = `<strong>${content}</strong>`;
    if (italic) content = `<em>${content}</em>`;
    if (underline) content = `<u>${content}</u>`;
    if (strikethrough) content = `<del>${content}</del>`;
  } else if (textContent) {
    content = textContent;
  }
  
  switch (type) {
    case 'paragraph':
      return `<p style="margin-bottom: 1.5em; line-height: 1.8; font-size: 1.125rem; color: #374151; font-family: inherit;">${content}${children ? children.map(renderBlock).join('') : ''}</p>`;
    
    case 'heading':
      const tag = `h${level || 1}`;
      // 严格按照富文本规范设置文字大小
      const fontSize = level === 1 ? '2.5rem' : level === 2 ? '2rem' : level === 3 ? '1.75rem' : level === 4 ? '1.5rem' : level === 5 ? '1.25rem' : '1.125rem';
      const fontWeight = level === 1 ? '800' : level === 2 ? '700' : '600';
      const lineHeight = level === 1 ? '1.1' : level === 2 ? '1.2' : '1.3';
      return `<${tag} style="margin-top: 2em; margin-bottom: 1em; font-weight: ${fontWeight}; color: #111827; font-size: ${fontSize}; line-height: ${lineHeight}; font-family: inherit;">${content}${children ? children.map(renderBlock).join('') : ''}</${tag}>`;
    
    case 'list':
      const listTag = format === 'ordered' ? 'ol' : 'ul';
      return `<${listTag} style="margin: 1em 0; padding-left: 1.5em;">${children ? children.map(renderBlock).join('') : ''}</${listTag}>`;
    
    case 'list-item':
      return `<li style="margin-bottom: 0.75em; line-height: 1.7; font-size: 1.125rem; color: #374151;">${content}${children ? children.map(renderBlock).join('') : ''}</li>`;
    
    case 'quote':
      return `<blockquote style="margin: 1.5em 0; padding: 1em 1.5em; border-left: 4px solid #e60012; background-color: #f9fafb; font-style: italic;">${content}${children ? children.map(renderBlock).join('') : ''}</blockquote>`;
    
    case 'code':
      return `<code style="background-color: #f3f4f6; padding: 0.125em 0.25em; border-radius: 0.25rem; font-family: 'Courier New', monospace; font-size: 0.875em;">${content}</code>`;
    
    case 'link':
      return `<a href="${url || '#'}" target="_blank" rel="noopener noreferrer" style="color: #e60012; text-decoration: underline; text-decoration-thickness: 1px; text-underline-offset: 2px;">${content}${children ? children.map(renderBlock).join('') : ''}</a>`;
    
    case 'image':
      // 统一通过图片处理管道解析为构建后 /assets/xxx-hash.webp
      const resolvedSrc = processImage(url || '');
      const imgTag = `<img src="${resolvedSrc}" alt="${alt || ''}" style="max-width: 100%; height: auto; margin: 1em 0; border-radius: 0.5rem; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);" />`;
      return caption ? `<figure>${imgTag}<figcaption style="text-align: center; font-style: italic; color: #6b7280; margin-top: 0.5em;">${caption}</figcaption></figure>` : imgTag;
    
    case 'bold':
      return `<strong style="font-weight: 600; color: #111827;">${content}${children ? children.map(renderBlock).join('') : ''}</strong>`;
    
    case 'italic':
      return `<em style="font-style: italic;">${content}${children ? children.map(renderBlock).join('') : ''}</em>`;
    
    case 'underline':
      return `<u style="text-decoration: underline;">${content}${children ? children.map(renderBlock).join('') : ''}</u>`;
    
    case 'strikethrough':
      return `<del style="text-decoration: line-through; color: #6b7280;">${content}${children ? children.map(renderBlock).join('') : ''}</del>`;
    
    case 'table':
      return `<table style="width: 100%; border-collapse: collapse; margin: 1.5em 0; font-size: 0.875rem;">${children ? children.map(renderBlock).join('') : ''}</table>`;
    
    case 'table-row':
      return `<tr>${children ? children.map(renderBlock).join('') : ''}</tr>`;
    
    case 'table-cell':
      return `<td style="padding: 0.75em; border: 1px solid #e5e7eb; text-align: left;">${content}${children ? children.map(renderBlock).join('') : ''}</td>`;
    
    case 'table-head':
      return `<th style="padding: 0.75em; border: 1px solid #e5e7eb; text-align: left; background-color: #f9fafb; font-weight: 600;">${content}${children ? children.map(renderBlock).join('') : ''}</th>`;
    
    case 'text':
      // 处理纯文本节点
      return content;
    
    default:
      // 对于未知类型，尝试渲染内容
      return content || (children ? children.map(renderBlock).join('') : '');
  }
}

// 渲染所有内容块
const renderedContent = content.map(renderBlock).join('');
---

<div class={className} set:html={renderedContent}></div> 