---
import { getBannerData } from '@apis/homeBanner';

import { Image } from 'astro:assets';

// 定义组件props接口
export interface Props {
  bannerData?: Array<{
    id: number;
    name: string;
    description: string;
    link: string | null;
    image: string;
    mobileImage?: string;
    shipin?: string;
    alt: string;
  }>;
}

// 获取props
const banners = await getBannerData('homepage');
---

<!-- 响应式Banner容器 -->
<section class="banner-container" id="homepage-banner">
  <!-- Banner轮播 -->
  <div class="banner-carousel">
    {banners.map((banner, index) => (
              <div class={`banner-slide ${index === 0 ? 'active' : ''}`}>
          {/* PC端图片/视频 */}
          <div class="desktop-banner-image">
            {banner.field_bannershipin_url ? (
              <video
                src={banner.field_bannershipin_url}
                poster={banner.field_tupian_url}
                autoplay
                muted
                playsinline
                width={1440}
                height={600}
                class="banner-image"
                style="width: 100%; height: 100%; object-fit: cover; object-position: center; transition: transform 0.3s ease;"
              >
                您的浏览器不支持视频播放
              </video>
            ) : banner.desktopImage ? (
              <Image
                src={banner.desktopImage}
                alt={banner.alt}
                width={1440}
                height={600}
                loading={index === 0 ? "eager" : "lazy"}
                fetchpriority={index === 0 ? "high" : "auto"}
                decoding="async"
                class="banner-image"
                style="width: 100%; height: 100%; object-fit: cover; object-position: center; transition: transform 0.3s ease;"
              />
            ) : null}
          </div>
          {/* 手机端图片/视频 */}
          <div class="mobile-banner-image">
            {banner.field_bannershipin_url ? (
              <video
                src={banner.field_bannershipin_url}
                poster={banner.field_shouji_url || banner.field_tupian_url}
                autoplay
                muted
                playsinline
                width={375}
                height={600}
                class="banner-image"
                style="width: 100%; height: 100%; object-fit: cover; object-position: center; transition: transform 0.3s ease;"
              >
                您的浏览器不支持视频播放
              </video>
            ) : banner.field_shouji_url ? (
              <Image
                src={banner.field_shouji_url}
                alt={banner.alt}
                width={375}
                height={600}
                loading={index === 0 ? "eager" : "lazy"}
                fetchpriority={index === 0 ? "high" : "auto"}
                decoding="async"
                class="banner-image"
                style="width: 100%; height: 100%; object-fit: cover; object-position: center; transition: transform 0.3s ease;"
              />
            ) : banner.field_tupian_url && (
              <Image
                src={banner.field_tupian_url}
                alt={banner.alt}
                width={375}
                height={600}
                loading={index === 0 ? "eager" : "lazy"}
                fetchpriority={index === 0 ? "high" : "auto"}
                decoding="async"
                class="banner-image"
                style="width: 100%; height: 100%; object-fit: cover; object-position: center; transition: transform 0.3s ease;"
              />
            )}
          </div>
        </div>
    )  )  }
  </div>

  <!-- Progress Bar Controller - 原始样式 -->
  <div class="progress-controller">
    <!-- PREV Label -->
    <button id="prev-label" class="slide-label">PREV</button>
    
    <!-- Progress Bar Background -->
    <div class="progress-bar-container">
      <!-- Progress Fill -->
      <div id="progress-fill" class="progress-fill"></div>
    </div>
    
    <!-- NEXT Label -->
    <button id="next-label" class="slide-label">NEXT</button>
  </div>

  <!-- 移动端滑动指示器 -->
  <div class="mobile-swipe-indicator">
    {banners.length > 1 && banners.map((_, index) => (
      <div class={`swipe-dot ${index === 0 ? 'active' : ''}`} data-slide={index}></div>
    ))}
  </div>
</section>

<style>
  /* Banner容器样式 - 已在Layout中定义，这里补充轮播功能 */
  .banner-carousel {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .banner-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    overflow: hidden;
    pointer-events: none; /* 隐藏的slide不响应鼠标事件 */
  }

  .banner-slide.active {
    opacity: 1;
    pointer-events: auto; /* 只有显示的slide响应鼠标事件 */
  }

  /* Progress Bar Controller - 原始样式 */
  .progress-controller {
    position: absolute;
    bottom: 32px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 32px;
    z-index: 10;
  }

  /* PREV/NEXT 标签样式 */
  .slide-label {
    background: none;
    border: none;
    color: white;
    font-size: 18px;
    font-weight: 500;
    letter-spacing: 2px;
    cursor: pointer;
    user-select: none;
    padding: 0;
    margin: 0;
    transition: opacity 0.3s ease;
  }

  .slide-label:hover {
    opacity: 0.8;
  }

  /* Progress Bar Background */
  .progress-bar-container {
    position: relative;
    width: 384px;
    height: 2px;
    background-color: rgba(255, 255, 255, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Progress Fill */
  .progress-fill {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 0%;
    background-color: rgba(255, 255, 255, 1);
    transition: width linear;
  }

  /* 移动端滑动指示器 */
  .mobile-swipe-indicator {
    display: none;
    position: absolute;
    bottom: 15px;
    left: 50%;
    transform: translateX(-50%);
    gap: 8px;
    z-index: 10;
  }

  .swipe-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.5);
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .swipe-dot.active {
    background-color: rgba(255, 255, 255, 1);
    transform: scale(1.2);
  }

  /* Banner容器样式 */
  .banner-container {
    display: block !important;
    height: 800px;
    background: #f3f4f6;
  }

  /* 响应式图片容器 */
  .desktop-banner-image {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  
  .mobile-banner-image {
    display: none;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  /* Banner图片悬停放大效果 - 只对当前显示的图片生效 */
  #homepage-banner .banner-slide.active .banner-image:hover {
    transform: scale(1.05) !important;
  }

  /* 确保悬停在当前显示的slide容器上也能触发图片缩放 */
  #homepage-banner .banner-slide.active:hover .banner-image {
    transform: scale(1.05) !important;
  }

  /* 移动端响应式样式 */
  @media (max-width: 768px) {
    .banner-container {
      height: 200px !important; /* 移动端降低高度 */
      touch-action: pan-y; /* 允许垂直滚动，但限制水平滚动 */
      user-select: none; /* 防止长按选择文本 */
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
    }
    
    .desktop-banner-image {
      display: none !important;
    }
    
    .mobile-banner-image {
      display: block !important;
    }
    
    /* 移动端隐藏进度条控制器 */
    .progress-controller {
      display: none;
    }
    
    /* 移动端显示滑动指示器 */
    .mobile-swipe-indicator {
      display: flex !important;
    }
    
    /* 移动端Banner图片优化 */
    .banner-slide {
      cursor: grab;
    }
    
    .banner-slide:active {
      cursor: grabbing;
    }
    
    /* 移动端图片防止拖拽 */
    .mobile-banner-image img {
      pointer-events: none;
      -webkit-user-drag: none;
      -khtml-user-drag: none;
      -moz-user-drag: none;
      -o-user-drag: none;
      user-drag: none;
    }
  }
</style>

<script type="text/javascript">
  // 高性能Banner轮播 - 优化版本
  (function() {
  let currentSlide = 0;
  let autoSlideTimer = null;
  let progressTimer = null;
  
    // 缓存DOM元素
  const slides = document.querySelectorAll('#homepage-banner .banner-slide');
  const progressFill = document.getElementById('progress-fill');
    const prevLabel = document.getElementById('prev-label');
    const nextLabel = document.getElementById('next-label');
    const swipeDots = document.querySelectorAll('.swipe-dot');
    
  const totalSlides = slides.length;
  const slideInterval = 5000;

    // 防抖函数
    function debounce(func, wait) {
      let timeout;
      return function(...args) {
        const later = () => {
          clearTimeout(timeout);
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

  function goToSlide(index) {
    if (index === currentSlide || totalSlides <= 1) return;
    
    // 停止当前slide的自动切换
    stopAutoSlide();
    
    // 使用requestAnimationFrame优化动画
    requestAnimationFrame(() => {
      slides[currentSlide].classList.remove('active');
      currentSlide = index;
      slides[currentSlide].classList.add('active');
      
      // 更新移动端滑动指示器
      updateSwipeDots();
      
      resetProgress();
      
      // 检查新slide是否包含视频，如果是则重新播放
      const newSlideElement = slides[currentSlide];
      const videoElement = newSlideElement?.querySelector('video');
      if (videoElement) {
        // 重置视频到开始位置并播放
        videoElement.currentTime = 0;
        videoElement.play().catch(() => {
          // 如果自动播放失败，忽略错误
        });
      }
      
      // 重新启动自动切换
      startAutoSlide();
    });
  }

  function updateSwipeDots() {
    swipeDots.forEach((dot, index) => {
      if (index === currentSlide) {
        dot.classList.add('active');
      } else {
        dot.classList.remove('active');
      }
    });
  }

  function nextSlide() {
    const next = (currentSlide + 1) % totalSlides;
    goToSlide(next);
  }

  function prevSlide() {
    const prev = (currentSlide - 1 + totalSlides) % totalSlides;
    goToSlide(prev);
  }

  function startAutoSlide() {
    if (totalSlides <= 1) return;
    
    if (autoSlideTimer) {
      clearInterval(autoSlideTimer);
    }
    
    // 检查当前slide是否包含视频
    const currentSlideElement = slides[currentSlide];
    const videoElement = currentSlideElement?.querySelector('video');
    
    if (videoElement) {
      // 如果当前slide包含视频，确保视频播放并等待播放完成后再切换
      const handleVideoEnd = () => {
        videoElement.removeEventListener('ended', handleVideoEnd);
        nextSlide();
        startAutoSlide(); // 重新启动自动切换
      };
      
      // 确保视频播放
      videoElement.currentTime = 0;
      videoElement.play().catch(() => {
        // 如果自动播放失败，忽略错误
      });
      
      videoElement.addEventListener('ended', handleVideoEnd);
      
      // 等待视频加载完成后再开始进度条
      const handleVideoLoaded = () => {
        startProgress(); // 开始进度条动画
        videoElement.removeEventListener('loadedmetadata', handleVideoLoaded);
        videoElement.removeEventListener('loadeddata', handleVideoLoaded);
      };
      
      if (videoElement.readyState >= 1) {
        startProgress(); // 视频已加载，直接开始进度条
      } else {
        videoElement.addEventListener('loadedmetadata', handleVideoLoaded);
        videoElement.addEventListener('loadeddata', handleVideoLoaded);
      }
    } else {
      // 如果没有视频，使用定时器切换
      autoSlideTimer = setInterval(nextSlide, slideInterval);
      startProgress();
    }
  }

  function stopAutoSlide() {
    if (autoSlideTimer) {
      clearInterval(autoSlideTimer);
      autoSlideTimer = null;
    }
    stopProgress();
  }

  function stopProgress() {
    if (progressTimer) {
        cancelAnimationFrame(progressTimer);
      progressTimer = null;
    }
  }

  function startProgress() {
    if (!progressFill) return;
    
    // 检查当前slide是否包含视频
    const currentSlideElement = slides[currentSlide];
    const videoElement = currentSlideElement?.querySelector('video');
    
    if (videoElement) {
      // 如果包含视频，等待视频加载完成后再开始进度条
      const handleVideoLoaded = () => {
        const videoDuration = videoElement.duration;
        if (videoDuration && videoDuration > 0) {
          const startTime = performance.now();
          
          function animate(currentTime) {
            const elapsed = currentTime - startTime;
            const progress = Math.min((elapsed / (videoDuration * 1000)) * 100, 100);
            
            progressFill.style.width = progress + '%';
            
            if (progress < 100) {
              progressTimer = requestAnimationFrame(animate);
            }
          }
          
          progressTimer = requestAnimationFrame(animate);
        } else {
          // 如果视频时长无效，使用默认时长
          const startTime = performance.now();
          
          function animate(currentTime) {
            const elapsed = currentTime - startTime;
            const progress = Math.min((elapsed / slideInterval) * 100, 100);
            
            progressFill.style.width = progress + '%';
            
            if (progress < 100) {
              progressTimer = requestAnimationFrame(animate);
            }
          }
          
          progressTimer = requestAnimationFrame(animate);
        }
        
        // 移除事件监听器
        videoElement.removeEventListener('loadedmetadata', handleVideoLoaded);
        videoElement.removeEventListener('loadeddata', handleVideoLoaded);
      };
      
      // 如果视频已经加载完成
      if (videoElement.readyState >= 1) {
        handleVideoLoaded();
      } else {
        // 等待视频加载完成
        videoElement.addEventListener('loadedmetadata', handleVideoLoaded);
        videoElement.addEventListener('loadeddata', handleVideoLoaded);
        
        // 设置超时，防止无限等待
        setTimeout(() => {
          videoElement.removeEventListener('loadedmetadata', handleVideoLoaded);
          videoElement.removeEventListener('loadeddata', handleVideoLoaded);
          handleVideoLoaded(); // 使用默认时长
        }, 5000);
      }
    } else {
      // 如果没有视频，使用默认的slideInterval
      const startTime = performance.now();
      
      function animate(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min((elapsed / slideInterval) * 100, 100);
        
        progressFill.style.width = progress + '%';
        
        if (progress < 100) {
          progressTimer = requestAnimationFrame(animate);
        }
      }
      
      progressTimer = requestAnimationFrame(animate);
    }
  }

  function resetProgress() {
    if (progressFill) {
      progressFill.style.width = '0%';
    }
    
    if (progressTimer) {
      cancelAnimationFrame(progressTimer);
    }
  }

    // 防抖的按钮点击处理
    const debouncedPrev = debounce(() => {
      prevSlide();
      stopAutoSlide();
      setTimeout(startAutoSlide, 100);
    }, 300);

    const debouncedNext = debounce(() => {
      nextSlide();
      stopAutoSlide();
      setTimeout(startAutoSlide, 100);
    }, 300);

  function initBanner() {
    if (totalSlides <= 1) return;
    
    // 确保第一张图片有active类
    if (slides.length > 0) {
      slides[0].classList.add('active');
    }
    
    // 初始化滑动指示器
    updateSwipeDots();
    
      // 使用委托事件处理
    if (prevLabel) {
        prevLabel.addEventListener('click', debouncedPrev, { passive: true });
    }
    
    if (nextLabel) {
        nextLabel.addEventListener('click', debouncedNext, { passive: true });
      }

    // 为滑动指示器添加点击事件
    swipeDots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        stopAutoSlide();
        goToSlide(index);
        setTimeout(startAutoSlide, 100);
      }, { passive: true });
    });

      // 页面可见性API - 页面隐藏时停止轮播
      document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
        stopAutoSlide();
        } else {
          startAutoSlide();
        }
      });

    startAutoSlide();
  }

    // 添加触摸手势支持
    function addTouchSupport() {
      const banner = document.getElementById('homepage-banner');
      if (!banner) return;
      
      let startX = 0;
      let startY = 0;
      let isDragging = false;
      
      // 触摸开始
      banner.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        isDragging = true;
        
        // 停止自动轮播
        stopAutoSlide();
      }, { passive: true });
      
      // 触摸移动
      banner.addEventListener('touchmove', (e) => {
        if (!isDragging) return;
        
        // 防止页面滚动（只在水平滑动时）
        const diffX = Math.abs(e.touches[0].clientX - startX);
        const diffY = Math.abs(e.touches[0].clientY - startY);
        
        if (diffX > diffY && diffX > 10) {
          e.preventDefault();
        }
      }, { passive: false });
      
      // 触摸结束
      banner.addEventListener('touchend', (e) => {
        if (!isDragging) return;
        
        const endX = e.changedTouches[0].clientX;
        const endY = e.changedTouches[0].clientY;
        const diffX = startX - endX;
        const diffY = Math.abs(startY - endY);
        const threshold = 50; // 滑动阈值
        
        isDragging = false;
        
        // 只有水平滑动距离大于垂直滑动距离且超过阈值时才触发切换
        if (Math.abs(diffX) > threshold && Math.abs(diffX) > diffY) {
          if (diffX > 0) {
            // 向左滑动，显示下一张
            nextSlide();
          } else {
            // 向右滑动，显示上一张
            prevSlide();
          }
        }
        
        // 重新启动自动轮播
        setTimeout(startAutoSlide, 100);
      }, { passive: true });
      
      // 触摸取消
      banner.addEventListener('touchcancel', () => {
        isDragging = false;
        setTimeout(startAutoSlide, 100);
      }, { passive: true });
    }

    // 性能优化的初始化
    function init() {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
          // 使用setTimeout避免阻塞首屏渲染
      setTimeout(() => {
        initBanner();
        addTouchSupport();
      }, 100);
    });
  } else {
    setTimeout(() => {
      initBanner();
      addTouchSupport();
    }, 100);
  }
    }

    init();
  })();
</script> 