---
// 语言选择器组件
export interface Props {
  supportedLanguages: Array<{localeCode: string, name: string, domain?: string, locale?: string}>;
  currentLang: string;
  showLanguageSelector?: boolean;
  hideWhenSingleLanguage?: boolean;
}

const { 
  supportedLanguages, 
  currentLang, 
  showLanguageSelector = true,
  hideWhenSingleLanguage = false 
} = Astro.props;

// 检查是否应该显示语言选择器
const shouldShow = showLanguageSelector && 
  (!hideWhenSingleLanguage || supportedLanguages.length > 1);
---

{shouldShow && (
  <div class="relative flex items-center space-x-2">
    <!-- 选择器框 -->
    <button 
      id="language-selector" 
      class="flex items-center space-x-2 bg-transparent border border-white/30 rounded px-3 py-2 text-white hover:bg-white/10 transition-all duration-200" 
      style="font-size: 1.4rem; min-width: 80px;display: flex;align-items: center;justify-content: space-between;"
    >
      <span id="current-language-display">
        {supportedLanguages.find(lang => lang.localeCode === currentLang)?.name || currentLang}
      </span>
      <i class="iconfont icon-arrowdown w-4 h-6 transition-transform duration-200 text-lg" id="language-arrow"></i>
    </button>

    <!-- 下拉菜单 -->
    <div 
      id="language-dropdown" 
      class="absolute top-full right-0 mt-1 bg-white rounded-md shadow-lg border border-gray-200 overflow-hidden z-50 hidden" 
      style="min-width: 16rem; max-height: 60vh; overflow-y: auto;"
    >
              {supportedLanguages.map(lang => (
          <a 
            href={`https://${lang.domain}/`}
            target="_blank"
            class={`flex items-center space-x-3 px-4 py-3 hover:bg-gray-50 transition-colors duration-200 language-option ${
              lang.localeCode === currentLang ? 'bg-blue-50 border-l-4 border-blue-500' : ''
            }`} 
            data-lang={lang.localeCode} 
            data-name={lang.name}
            data-domain={lang.domain}
          >
            <span class="text-2xl">🌐</span>
            <span class="text-gray-800 font-medium">{lang.locale || lang.name}</span>
            {lang.localeCode === currentLang && (
              <i class="iconfont icon-check w-4 h-4 text-blue-500 ml-auto"></i>
            )}
          </a>
        ))}
    </div>
  </div>
)}

<script>
  // 语言选择器功能
  function initLanguageSelector() {
    const languageSelector = document.getElementById('language-selector');
    const languageDropdown = document.getElementById('language-dropdown');
    const languageArrow = document.getElementById('language-arrow');
    
    if (!languageSelector || !languageDropdown || !languageArrow) return;

    // 切换下拉菜单
    languageSelector.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      const isHidden = languageDropdown.classList.contains('hidden');
      
      if (isHidden) {
        languageDropdown.classList.remove('hidden');
        languageArrow.style.transform = 'rotate(180deg)';
      } else {
        languageDropdown.classList.add('hidden');
        languageArrow.style.transform = 'rotate(0deg)';
      }
    });


    // 点击外部关闭下拉菜单
    document.addEventListener('click', (e) => {
      const target = e.target as Node;
      if (target && !languageSelector.contains(target) && !languageDropdown.contains(target)) {
        languageDropdown.classList.add('hidden');
        languageArrow.style.transform = 'rotate(0deg)';
      }
    });
  }
  // 环境判断和链接处理
  function handleLanguageLinks() {
    const languageOptions = document.querySelectorAll('.language-option');
    
    languageOptions.forEach(option => {
      const link = option as HTMLAnchorElement;
      const domain = link.getAttribute('data-domain');
      const localeCode = link.getAttribute('data-lang');
      
      if (domain && localeCode) {
        // 判断是否为本地环境
        const isDev = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
        
        if (isDev) {
          // 本地环境：使用路径前缀，在当前页面打开
          link.href = `/${localeCode}/`;
          link.target = '_self';
        } else {
          // 生产环境：使用子域名，在新标签页打开
          link.href = `https://${domain}/`;
          link.target = '_blank';
        }
      }
    });
  }

  // 初始化语言选择器
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initLanguageSelector();
      handleLanguageLinks();
    });
  } else {
    initLanguageSelector();
    handleLanguageLinks();
  }
</script>

<style>
  /* 语言选择器样式 */
  .language-option {
    transition: all 0.2s ease;
  }
  
  .language-option:hover {
    background-color: #f3f4f6;
  }
  
  .language-option.bg-blue-50 {
    background-color: #eff6ff;
    border-left: 4px solid #3b82f6;
  }
  
  /* 下拉箭头动画 */
  #language-arrow {
    transition: transform 0.2s ease;
  }
  
  /* 下拉菜单动画 */
  #language-dropdown {
    transition: opacity 0.2s ease, transform 0.2s ease;
  }
  
  #language-dropdown.hidden {
    opacity: 0;
    transform: translateY(-10px);
    pointer-events: none;
  }
</style>
