---
// 通用联系表单组件
interface Props {
  id?: string;
  title?: string;
  description?: string;
  showTitle?: boolean;
  showDescription?: boolean;
  layout?: 'modal' | 'inline';
  className?: string;
  translations?: any;
}

const { 
  id = "contactForm", 
  title,
  description,
  showTitle = true,
  showDescription = true,
  layout = 'inline',
  className = '',
  translations = {}
} = Astro.props;

// 获取翻译文本
const t = translations.form || {};
---

<form id={id} class={`contact-form space-y-6 ${className}`}>
  {showTitle && title && (
    <div class="mb-6">
      <h2 class="text-xl font-bold text-gray-900 mb-2 flex items-center">
        <div class="w-1 h-6 bg-red-600 mr-3"></div>
        {title}
      </h2>
      {showDescription && description && (
        <p class="text-gray-600">{description}</p>
      )}
    </div>
  )}
  
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <!-- 姓名 -->
    <div>
      <label for={`${id}-name`} class="block text-sm font-medium text-gray-700 mb-2">
        {t.labels?.name} *
      </label>
      <input 
        type="text" 
        id={`${id}-name`} 
        name="name" 
        required
        placeholder={t.placeholders?.name}
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent transition-all duration-200"
      />
    </div>

    <!-- 电话 -->
    <div>
      <label for={`${id}-phone`} class="block text-sm font-medium text-gray-700 mb-2">
        {t.labels?.telephone} *
      </label>
      <input 
        type="tel" 
        id={`${id}-phone`} 
        name="phone" 
        required
        placeholder={t.placeholders?.telephone}
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent transition-all duration-200"
      />
    </div>
  </div>

  <!-- 邮箱 -->
  <div>
    <label for={`${id}-email`} class="block text-sm font-medium text-gray-700 mb-2">
      {t.labels?.email} *
    </label>
    <input 
      type="email" 
      id={`${id}-email`} 
      name="email" 
      required
      placeholder={t.placeholders?.email}
      class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent transition-all duration-200"
    />
  </div>

  <!-- 公司名称 -->
  <div>
    <label for={`${id}-company`} class="block text-sm font-medium text-gray-700 mb-2">
      {t.labels?.company}
    </label>
    <input 
      type="text" 
      id={`${id}-company`} 
      name="company" 
      placeholder={t.placeholders?.company}
      class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent transition-all duration-200"
    />
  </div>

  <!-- 咨询内容 -->
  <div>
    <label for={`${id}-message`} class="block text-sm font-medium text-gray-700 mb-2">
      {t.labels?.message} *
    </label>
    <textarea 
      id={`${id}-message`} 
      name="message" 
      rows="6"
      required
      placeholder={t.placeholders?.message}
      class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent transition-all duration-200 resize-none"
    ></textarea>
  </div>

  <!-- 提交按钮 -->
  <div>
    <button 
      type="submit"
      class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-200 text-base"
    >
      {t.buttons?.send}
    </button>
  </div>
</form>

<script>
  // 联系表单功能
  class ContactForm {
    private form: HTMLFormElement;
    private submitBtn: HTMLButtonElement | null;

    constructor(formId: string) {
      this.form = document.getElementById(formId) as HTMLFormElement;
      this.submitBtn = this.form?.querySelector('button[type="submit"]') as HTMLButtonElement;
      
      if (this.form) {
        this.init();
      }
    }

    init() {
      this.form.addEventListener('submit', (e) => this.handleSubmit(e));
    }

    async handleSubmit(e: Event) {
      e.preventDefault();
      
      const formData = new FormData(this.form);
      const data = Object.fromEntries(formData.entries());
      
      // 显示加载状态
      if (this.submitBtn) {
        const originalText = this.submitBtn.textContent;
        this.submitBtn.textContent = '发送中...';
        this.submitBtn.disabled = true;

        try {
          // 这里可以添加实际的表单提交逻辑
          console.log('表单数据:', data);
          
          // 模拟API调用
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // 显示成功消息
          this.showMessage('提交成功！我们会尽快与您联系。', 'success');
          
          // 触发自定义事件，通知其他组件表单提交成功
          document.dispatchEvent(new CustomEvent('contactFormSubmitted', {
            detail: { success: true, data: data }
          }));
          
          // 重置表单
          this.form.reset();
          
        } catch (error) {
          console.error('提交失败:', error);
          this.showMessage('提交失败，请稍后重试。', 'error');
          
        } finally {
          // 恢复按钮状态
          this.submitBtn.textContent = originalText;
          this.submitBtn.disabled = false;
        }
      }
    }

    showMessage(message: string, type: 'success' | 'error' | 'info' = 'info') {
      // 创建消息提示
      const messageDiv = document.createElement('div');
      messageDiv.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-md text-white ${
        type === 'success' ? 'bg-green-500' : 
        type === 'error' ? 'bg-red-500' : 'bg-blue-500'
      }`;
      messageDiv.textContent = message;
      
      document.body.appendChild(messageDiv);
      
      // 3秒后自动移除
      setTimeout(() => {
        messageDiv.remove();
      }, 3000);
    }
  }

  // 初始化所有联系表单
  document.addEventListener('DOMContentLoaded', () => {
    const contactForms = document.querySelectorAll('.contact-form');
    contactForms.forEach(form => {
      const formId = form.id;
      if (formId) {
        new ContactForm(formId);
      }
    });
  });
</script> 