---
import { Image } from 'astro:assets';
import { processImagesForAstro } from '../../../lib/imageProcessor.js';

// 定义组件props接口
export interface Props {
  bannerData?: Array<{
    id: number;
    name: string;
    description: string;
    link: string | null;
    image: string;
    alt: string;
  }>;
}

// 获取props
const { bannerData = [] } = Astro.props;

// 处理Banner数据，确保图片能正确加载到 <Image>（需要模块或远程URL，而不是本地字符串路径）
const banners = bannerData.map(banner => ({
  ...banner,
  processedImages: processImagesForAstro([banner.image])
}));

// FullScreenBanner.astro - SSG优化版本，防止CLS
---

<!-- 预加载关键Banner图片 -->
{banners.length > 0 && banners[0].processedImages.length > 0 && (
  <link rel="preload" as="image" href={banners[0].processedImages[0]} type="image/webp" fetchpriority="high">
)}

<!-- PC端Banner容器 -->
<section class="banner-container desktop-banner" id="desktop-banner">
  <!-- Banner轮播 -->
  <div class="banner-carousel">
    {banners.map((banner, index) => (
      banner.processedImages.length > 0 && (
        <div class={`banner-slide ${index === 0 ? 'active' : ''}`}>
          <Image 
            src={banner.processedImages[0]}
            alt={banner.alt}
            width={1440}
            height={600}
            loading={index === 0 ? "eager" : "lazy"}
            fetchpriority={index === 0 ? "high" : "auto"}
            decoding="async"
            class="banner-image"
            style="width: 100%; height: 100%; object-fit: cover; object-position: center; transition: transform 0.3s ease;"
          />
        </div>
      )
    ))}
  </div>

  <!-- Progress Bar Controller - 原始样式 -->
  <div class="progress-controller">
    <!-- PREV Label -->
    <button id="prev-label" class="slide-label">PREV</button>
    
    <!-- Progress Bar Background -->
    <div class="progress-bar-container">
      <!-- Progress Fill -->
      <div id="progress-fill" class="progress-fill"></div>
    </div>
    
    <!-- NEXT Label -->
    <button id="next-label" class="slide-label">NEXT</button>
  </div>
</section>

<style>
  /* Banner容器样式 - 已在Layout中定义，这里补充轮播功能 */
  .banner-carousel {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .banner-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    overflow: hidden;
    pointer-events: none; /* 隐藏的slide不响应鼠标事件 */
  }

  .banner-slide.active {
    opacity: 1;
    pointer-events: auto; /* 只有显示的slide响应鼠标事件 */
  }

  /* Progress Bar Controller - 原始样式 */
  .progress-controller {
    position: absolute;
    bottom: 32px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 32px;
    z-index: 10;
  }

  /* PREV/NEXT 标签样式 */
  .slide-label {
    background: none;
    border: none;
    color: white;
    font-size: 18px;
    font-weight: 500;
    letter-spacing: 2px;
    cursor: pointer;
    user-select: none;
    padding: 0;
    margin: 0;
    transition: opacity 0.3s ease;
  }

  .slide-label:hover {
    opacity: 0.8;
  }

  /* Progress Bar Background */
  .progress-bar-container {
    position: relative;
    width: 384px;
    height: 2px;
    background-color: rgba(255, 255, 255, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Progress Fill */
  .progress-fill {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 0%;
    background-color: rgba(255, 255, 255, 1);
    transition: width linear;
  }

  /* PC端轮播图显示控制 - 强制显示 */
  .desktop-banner {
    display: block !important;
    position: relative;
    width: 100%;
    height: 800px;
    overflow: hidden;
    background: #f3f4f6;
    z-index: 1;
    margin: 0;
    padding: 0;
  }

  /* Banner图片悬停放大效果 - 只对当前显示的图片生效 */
  #desktop-banner .banner-slide.active img:hover,
  #desktop-banner .banner-slide.active .banner-image:hover {
    transform: scale(1.05) !important;
  }

  /* 确保悬停在当前显示的slide容器上也能触发图片缩放 */
  #desktop-banner .banner-slide.active:hover img {
    transform: scale(1.05) !important;
  }

  /* 移动端隐藏PC端轮播图 */
  @media (max-width: 768px) {
    .desktop-banner {
      display: none !important;
    }
  }
</style>

<script type="text/javascript">
  // 高性能Banner轮播 - 优化版本
  (function() {
  let currentSlide = 0;
  let autoSlideTimer = null;
  let progressTimer = null;
  
    // 缓存DOM元素
  const slides = document.querySelectorAll('#desktop-banner .banner-slide');
  const progressFill = document.getElementById('progress-fill');
    const prevLabel = document.getElementById('prev-label');
    const nextLabel = document.getElementById('next-label');
    
  const totalSlides = slides.length;
  const slideInterval = 5000;

    // 防抖函数
    function debounce(func, wait) {
      let timeout;
      return function(...args) {
        const later = () => {
          clearTimeout(timeout);
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

  function goToSlide(index) {
    if (index === currentSlide || totalSlides <= 1) return;
    
      // 使用requestAnimationFrame优化动画
      requestAnimationFrame(() => {
    slides[currentSlide].classList.remove('active');
    currentSlide = index;
    slides[currentSlide].classList.add('active');
    
    resetProgress();
    startProgress();
      });
  }

  function nextSlide() {
    const next = (currentSlide + 1) % totalSlides;
    goToSlide(next);
  }

  function prevSlide() {
    const prev = (currentSlide - 1 + totalSlides) % totalSlides;
    goToSlide(prev);
  }

  function startAutoSlide() {
    if (totalSlides <= 1) return;
    
      if (autoSlideTimer) {
        clearInterval(autoSlideTimer);
      }
      autoSlideTimer = setInterval(nextSlide, slideInterval);
    startProgress();
  }

  function stopAutoSlide() {
    if (autoSlideTimer) {
      clearInterval(autoSlideTimer);
      autoSlideTimer = null;
    }
    stopProgress();
  }

  function stopProgress() {
    if (progressTimer) {
        cancelAnimationFrame(progressTimer);
      progressTimer = null;
    }
  }

  function startProgress() {
    if (!progressFill) return;
    
    const startTime = performance.now();
    
    function animate(currentTime) {
      const elapsed = currentTime - startTime;
      const progress = Math.min((elapsed / slideInterval) * 100, 100);
      
      progressFill.style.width = progress + '%';
      
      if (progress < 100) {
        progressTimer = requestAnimationFrame(animate);
      }
    }
    
    progressTimer = requestAnimationFrame(animate);
  }

  function resetProgress() {
    if (progressFill) {
      progressFill.style.width = '0%';
    }
    
    if (progressTimer) {
      cancelAnimationFrame(progressTimer);
    }
  }

    // 防抖的按钮点击处理
    const debouncedPrev = debounce(() => {
      prevSlide();
      stopAutoSlide();
      setTimeout(startAutoSlide, 100);
    }, 300);

    const debouncedNext = debounce(() => {
      nextSlide();
      stopAutoSlide();
      setTimeout(startAutoSlide, 100);
    }, 300);

  function initBanner() {
    if (totalSlides <= 1) return;
    
    // 确保第一张图片有active类
    if (slides.length > 0) {
      slides[0].classList.add('active');
    }
    
      // 使用委托事件处理
    if (prevLabel) {
        prevLabel.addEventListener('click', debouncedPrev, { passive: true });
    }
    
    if (nextLabel) {
        nextLabel.addEventListener('click', debouncedNext, { passive: true });
      }

      // 页面可见性API - 页面隐藏时停止轮播
      document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
        stopAutoSlide();
        } else {
          startAutoSlide();
        }
      });

    startAutoSlide();
  }

    // 性能优化的初始化
    function init() {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
          // 使用setTimeout避免阻塞首屏渲染
      setTimeout(initBanner, 100);
    });
  } else {
    setTimeout(initBanner, 100);
  }
    }

    init();
  })();
</script> 