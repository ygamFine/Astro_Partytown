---
// 环境检测
const isProd = import.meta.env.PROD;
const isDev = import.meta.env.DEV;
// 优先读服务端环境变量，其次读公开前缀（用于浏览器端兜底）
const PUBLIC_API_URL = (typeof process !== 'undefined' ? process.env.PUBLIC_API_URL : '') || import.meta.env.PUBLIC_API_URL || '';
// 生产构建缺省禁用动态脚本获取；如需开启，设置 ENABLE_DYNAMIC_SCRIPTS=true 或 PUBLIC_ENABLE_DYNAMIC_SCRIPTS=true
const ENABLE_DYNAMIC_SCRIPTS = (
  (typeof process !== 'undefined' ? process.env.ENABLE_DYNAMIC_SCRIPTS : '') === 'true'
  || import.meta.env.PUBLIC_ENABLE_DYNAMIC_SCRIPTS === 'true'
);
const allowDynamicFetch = isDev || ENABLE_DYNAMIC_SCRIPTS;

// 组件属性
export interface Props {
  position: 'header' | 'body-top' | 'body-bottom';
  pageType?: string;
  route?: string;
  loadCondition?: boolean;
  lang?: string;
}

const {
  position,
  loadCondition = true
} = Astro.props;

// 不对接口返回内容做任何改动，直接按位置插入

// Strapi API 配置（缺少基址时直接跳过加载，避免 undefined/... 报错）
const STRAPI_API_URL = PUBLIC_API_URL ? `${PUBLIC_API_URL}/api/insert-code` : '';

// 获取动态脚本数据 - 在构建时执行
let dynamicScripts = null;
let error = null;

// 开关与条件判断（开发环境或显式启用时才获取远端代码）
const shouldLoad = allowDynamicFetch && loadCondition && STRAPI_API_URL;

if (shouldLoad) {
  try {
    const response = await fetch(STRAPI_API_URL, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...(process.env.PUBLIC_API_TOKEN ? { 'Authorization': `Bearer ${process.env.PUBLIC_API_TOKEN}` } : {})
      },
      // 生产环境使用缓存，开发环境实时获取
      cache: isProd ? 'force-cache' : 'no-store'
    });

    if (response.ok) {
      const data = await response.json();
      dynamicScripts = data.data;
    } else {
      error = `API 请求失败: ${response.status}`;
      if (isDev) console.error('动态脚本加载器错误:', error);
    }
  } catch (err: any) {
    error = `获取动态脚本失败: ${err.message}`;
    if (isDev) console.error('动态脚本加载器错误:', error);
  }
}

// 根据位置过滤脚本内容
const getScriptsByPosition = (scripts: any, pos: string) => {
  if (!scripts) return null;
  
  switch (pos) {
    case 'header':
      return {
        meta: scripts.header_label_meta,
        css: scripts.header_label_css,
        scripts: scripts.header_label_scripts
      };
    case 'body-top':
      return {
        css: scripts.body_label_top_css,
        scripts: scripts.body_label_top_css_scripts
      };
    case 'body-bottom':
      return {
        css: scripts.body_label_bottom_css,
        scripts: scripts.body_label_bottom_scripts
      };
    default:
      return null;
  }
};

// 获取当前位置的脚本
const currentScripts = dynamicScripts ? getScriptsByPosition(dynamicScripts, position) : null;

// 直接渲染接口返回的 HTML 片段


---

<!-- 🎯 动态脚本加载器 - 位置: {position} -->
{currentScripts && (
  <>
    <!-- 📝 Meta 标签 (仅 header 位置) -->
    {position === 'header' && currentScripts.meta && (
      <Fragment set:html={currentScripts.meta} />
    )}

    <!-- 🎨 CSS 样式 -->
    {currentScripts.css && (
      <Fragment set:html={currentScripts.css} />
    )}

    <!-- 📜 JavaScript 脚本 - 原样插入，不做任何处理 -->
    {currentScripts?.scripts && (
      <Fragment set:html={currentScripts.scripts} />
    )}
  </>
)}

<!-- 开发环境错误提示 -->
{isDev && error && (
  <script is:inline define:vars={{ error, position }}>
    console.warn(`🎯 动态脚本加载器 [${position}] 警告:`, error);
  </script>
)}
