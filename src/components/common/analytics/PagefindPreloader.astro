---
// 🚀 Pagefind 预加载器组件 - Astro 极致优化版本
export interface Props {
  pageType?: string;
  lang?: string;
  currentPath?: string;
  preloadStrategy?: 'immediate' | 'idle' | 'interaction' | 'smart';
  enableDebug?: boolean;
}

const {
  pageType = 'default',
  lang = 'en',
  currentPath = Astro.url.pathname,
  preloadStrategy = 'smart',
  enableDebug = import.meta.env.DEV
} = Astro.props;

const isProd = import.meta.env.PROD;
const isDev = import.meta.env.DEV;

const getPreloadConfig = () => {
  return {
    pageType,
    lang,
    currentPath,
    strategy: preloadStrategy,
    debug: enableDebug,
    isProd,
    isDev
  };
};

const config = getPreloadConfig();


---

<!-- 🚀 Pagefind 预加载器 - Astro 极致优化版本，使用Partytown优化 -->
<script type="text/partytown" define:vars={{ 
  isProd, 
  isDev, 
  pageType, 
  lang, 
  currentPath,
  config,
  enableDebug
}}>
  // 🚀 Astro 极致优化版本 - 利用所有 Astro 特性
  
  // 构建时变量注入
  const PAGE_TYPE = pageType;
  const CURRENT_LANG = lang;
  const CURRENT_PATH = currentPath;
  const IS_PROD = isProd;
  const IS_DEV = isDev;
  const CONFIG = config;
  const ENABLE_DEBUG = enableDebug;
  
  // 性能优化：避免重复初始化
  if (window.pagefindPreloaderInitialized) {
    return;
  }
  
  // 🎯 智能预加载器类
  class PagefindPreloader {
    constructor() {
      this.isPreloaded = false;
      this.preloadPromise = null;
      this.observers = [];
      this.startTime = Date.now();
      this.isSearchPage = CURRENT_PATH.includes('/search');
    }
    
    // 🎯 策略1: 立即预加载
    async preloadImmediate() {
      if (this.isPreloaded) return;
      
      await this.preloadPagefind();
    }
    
    // 🎯 策略2: 智能预加载策略
    async preloadWithStrategy() {
      if (this.isPreloaded) return;
      
      switch (CONFIG.strategy) {
        case 'immediate':
          await this.preloadImmediate();
          break;
        case 'idle':
          this.preloadOnIdle();
          break;
        case 'interaction':
          this.preloadOnInteraction();
          break;
        case 'smart':
        default:
          this.preloadSmart();
          break;
      }
    }
    
    // 🎯 空闲时预加载
    preloadOnIdle() {
      if ('requestIdleCallback' in window) {
        requestIdleCallback(() => this.preloadPagefind(), { timeout: 2000 });
      } else {
        setTimeout(() => this.preloadPagefind(), 1000);
      }
    }
    
    // 🎯 交互时预加载
    preloadOnInteraction() {
      let hasInteraction = false;
      
      const interactionHandler = () => {
        if (!hasInteraction) {
          hasInteraction = true;
          setTimeout(() => this.preloadPagefind(), 500);
          this.cleanupObservers();
        }
      };
      
      ['scroll', 'mousemove', 'click', 'touchstart'].forEach(event => {
        window.addEventListener(event, interactionHandler, { passive: true, once: true });
        this.observers.push(() => window.removeEventListener(event, interactionHandler));
      });
      
      // 备用方案
      setTimeout(() => {
        if (!hasInteraction && !this.isPreloaded) {
          this.preloadPagefind();
        }
      }, 3000);
    }
    
    // 🎯 智能预加载策略
    preloadSmart() {
      // 组合多种策略
      this.preloadOnIdle();
      this.preloadOnInteraction();
    }
    
    // 🎯 搜索页面专用预加载
    async loadForSearchPage() {
      if (this.isPreloaded) return;
      
      if (ENABLE_DEBUG) {
        console.log('🔍 搜索页面 - 立即预加载 Pagefind');
      }
      
      await this.preloadPagefind();
    }
    
    // 🎯 核心预加载逻辑
    async preloadPagefind() {
      if (this.isPreloaded && this.preloadPromise) {
        return this.preloadPromise;
      }
      
      this.preloadPromise = (async () => {
        try {
          const loadStartTime = Date.now();
          
          // 🎯 预加载 Pagefind CSS 和 JS 文件
          await this.preloadPagefindAssets();
          
          const loadEndTime = Date.now();
          const loadDuration = loadEndTime - loadStartTime;
          
          // 标记为已预加载
          this.isPreloaded = true;
          window.pagefindPreloaded = true;
          

          
          // 触发预加载完成事件
          window.dispatchEvent(new CustomEvent('pagefind:preloaded', {
            detail: {
              pageType: PAGE_TYPE,
              lang: CURRENT_LANG,
              timestamp: Date.now(),
              loadDuration,
              strategy: CONFIG.strategy
            }
          }));
          
          // 清理观察器
          this.cleanupObservers();
          
        } catch (error) {
          console.warn('⚠️ Pagefind 预加载失败:', error);
          
          // 开发环境显示详细错误
          if (IS_DEV) {
            console.error('Pagefind 预加载错误详情:', {
              error: error.message,
              stack: error.stack,
              pageType: PAGE_TYPE,
              lang: CURRENT_LANG,
              path: CURRENT_PATH,
              config: CONFIG
            });
          }
        }
      })();
      
      return this.preloadPromise;
    }
    
    // 🎯 预加载 Pagefind 资源文件
    async preloadPagefindAssets() {
      const assets = [
        // Pagefind CSS 文件
        '/pagefind/pagefind-ui.css',
        // Pagefind JS 文件
        '/pagefind/pagefind-ui.js'
      ];
      
      const preloadPromises = assets.map(asset => {
        return new Promise((resolve, reject) => {
          if (asset.endsWith('.css')) {
            // 预加载 CSS
            const link = document.createElement('link');
            link.rel = 'preload';
            link.href = asset;
            link.as = 'style';
            link.onload = () => resolve();
            link.onerror = () => reject(new Error(`Failed to preload CSS: ${asset}`));
            document.head.appendChild(link);
          } else if (asset.endsWith('.js')) {
            // 预加载 JS
            const script = document.createElement('script');
            script.src = asset;
            script.async = true;
            script.onload = () => resolve();
            script.onerror = () => reject(new Error(`Failed to preload JS: ${asset}`));
            document.head.appendChild(script);
          }
        });
      });
      
      await Promise.all(preloadPromises);
    }
    
    // 🧹 清理观察器
    cleanupObservers() {
      this.observers.forEach(cleanup => cleanup());
      this.observers = [];
    }
    
    // 🚀 启动预加载
    async start() {
      if (this.isSearchPage) {
        await this.loadForSearchPage();
      } else {
        await this.preloadWithStrategy();
      }
    }
  }
  
  // 🎯 初始化预加载器
  const preloader = new PagefindPreloader();
  
  // 🚀 启动预加载策略
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => preloader.start());
  } else {
    preloader.start();
  }
  
  // 🔍 开发环境调试工具
  if (IS_DEV && ENABLE_DEBUG) {
    window.pagefindDebug = {
      preloader,
      config: CONFIG,
      getStatus: () => ({
        isPreloaded: window.pagefindPreloaded,
        pageType: PAGE_TYPE,
        lang: CURRENT_LANG,
        path: CURRENT_PATH,
        isSearchPage: preloader.isSearchPage,
        strategy: CONFIG.strategy,
        startTime: preloader.startTime
      }),
      forcePreload: () => preloader.preloadPagefind(),
      reset: () => {
        window.pagefindPreloaded = false;
        preloader.isPreloaded = false;
        preloader.preloadPromise = null;
      },
      changeStrategy: (newStrategy) => {
        CONFIG.strategy = newStrategy;

      }
    };
  }
  
  // 标记为已初始化
  window.pagefindPreloaderInitialized = true;
</script>
