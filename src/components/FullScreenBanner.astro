---
// FullScreenBanner.astro - SSG优化版本，防止CLS
---

<!-- 预加载关键Banner图片 -->
<link rel="preload" as="image" href="/images/optimized/banner3.webp" type="image/webp" fetchpriority="high">

<!-- Banner容器 - 固定尺寸防止CLS -->
<section class="banner-container mobile-full-width" id="mobile-banner">
  <!-- Banner轮播 -->
  <div class="banner-carousel">
    <!-- Banner 1 - 默认显示 -->
    <div class="banner-slide active">
      <img 
        src="/images/optimized/banner3.webp" 
        alt="专业滑移装载机制造商"
        width="1920"
        height="400"
        loading="eager"
        fetchpriority="high"
        decoding="async"
        style="width: 100%; height: 100%; object-fit: cover; object-position: center;"
      />
    </div>
    
    <!-- Banner 2 -->
    <div class="banner-slide">
      <img 
        src="/images/optimized/banner222.webp" 
        alt="高品质工程机械设备"
        width="1920"
        height="400"
        loading="lazy"
        decoding="async"
        style="width: 100%; height: 100%; object-fit: cover; object-position: center;"
      />
    </div>
    
    <!-- Banner 3 -->
    <div class="banner-slide">
      <img 
        src="/images/optimized/banner.webp" 
        alt="值得信赖的合作伙伴"
        width="1920"
        height="400"
        loading="lazy"
        decoding="async"
        style="width: 100%; height: 100%; object-fit: cover; object-position: center;"
      />
    </div>
  </div>

  <!-- 轮播指示器 -->
  <div class="indicators">
    <button class="indicator active" data-slide="0"></button>
    <button class="indicator" data-slide="1"></button>
    <button class="indicator" data-slide="2"></button>
  </div>

  <!-- 进度条 -->
  <div class="progress-bar">
    <div class="progress-fill"></div>
  </div>
</section>

<style>
  /* Banner容器样式 - 已在Layout中定义，这里补充轮播功能 */
  .banner-carousel {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .banner-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
  }

  .banner-slide.active {
    opacity: 1;
  }

  /* 指示器样式 */
  .indicators {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 8px;
    z-index: 10;
  }

  .indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: 2px solid white;
    background: rgba(255, 255, 255, 0.5);
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .indicator.active {
    background: white;
  }

  /* 进度条 */
  .progress-bar {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: rgba(255, 255, 255, 0.3);
    z-index: 10;
  }

  .progress-fill {
    height: 100%;
    background: #dc2626;
    width: 0%;
    transition: width linear;
  }

  /* 移动端优化 */
  @media (max-width: 768px) {
    .indicators {
      bottom: 15px;
    }

    .indicator {
      width: 10px;
      height: 10px;
    }
  }
</style>

<script>
  // 简化的Banner轮播 - 避免TypeScript类型问题
  let currentSlide = 0;
  let autoSlideTimer = null;
  let progressTimer = null;
  let isPaused = false;
  
  const slides = document.querySelectorAll('.banner-slide');
  const indicators = document.querySelectorAll('.indicator');
  const progressFill = document.querySelector('.progress-fill');
  const totalSlides = slides.length;
  const slideInterval = 5000;

  function goToSlide(index) {
    if (index === currentSlide || totalSlides <= 1) return;
    
    // 隐藏当前幻灯片
    slides[currentSlide].classList.remove('active');
    indicators[currentSlide].classList.remove('active');
    
    // 显示新幻灯片
    currentSlide = index;
    slides[currentSlide].classList.add('active');
    indicators[currentSlide].classList.add('active');
    
    resetProgress();
    startProgress();
  }

  function nextSlide() {
    const next = (currentSlide + 1) % totalSlides;
    goToSlide(next);
  }

  function startAutoSlide() {
    if (totalSlides <= 1) return;
    
    autoSlideTimer = setInterval(() => {
      if (!isPaused) {
        nextSlide();
      }
    }, slideInterval);
    
    startProgress();
  }

  function pauseAutoSlide() {
    isPaused = true;
    if (progressTimer) {
      cancelAnimationFrame(progressTimer);
    }
  }

  function resumeAutoSlide() {
    isPaused = false;
    startProgress();
  }

  function startProgress() {
    if (!progressFill) return;
    
    const startTime = performance.now();
    
    function animate(currentTime) {
      if (isPaused) return;
      
      const elapsed = currentTime - startTime;
      const progress = Math.min((elapsed / slideInterval) * 100, 100);
      
      progressFill.style.width = progress + '%';
      
      if (progress < 100) {
        progressTimer = requestAnimationFrame(animate);
      }
    }
    
    progressTimer = requestAnimationFrame(animate);
  }

  function resetProgress() {
    if (progressFill) {
      progressFill.style.width = '0%';
    }
    
    if (progressTimer) {
      cancelAnimationFrame(progressTimer);
    }
  }

  // 事件绑定
  function initBanner() {
    if (totalSlides <= 1) return;
    
    // 指示器点击
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        goToSlide(index);
      });
    });

    // 鼠标悬停暂停
    const banner = document.getElementById('mobile-banner');
    if (banner) {
      banner.addEventListener('mouseenter', pauseAutoSlide);
      banner.addEventListener('mouseleave', resumeAutoSlide);
    }

    // 触摸滑动支持
    let startX = 0;
    if (banner) {
      banner.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
      }, { passive: true });
      
      banner.addEventListener('touchend', (e) => {
        const endX = e.changedTouches[0].clientX;
        const diff = startX - endX;
        const threshold = 50;
        
        if (Math.abs(diff) > threshold) {
          if (diff > 0) {
            nextSlide();
          } else {
            const prev = (currentSlide - 1 + totalSlides) % totalSlides;
            goToSlide(prev);
          }
        }
      }, { passive: true });
    }

    startAutoSlide();
  }

  // 延迟初始化，避免阻塞关键渲染
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(initBanner, 100);
    });
  } else {
    setTimeout(initBanner, 100);
  }
</script> 
</style> 