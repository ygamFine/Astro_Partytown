---
// FullScreenBanner.astro
---

<!-- Preload critical banner image - WebP优化版本 -->
<link rel="preload" as="image" href="/images/optimized/banner3.webp" type="image/webp" fetchpriority="high">

<section class="relative w-full overflow-hidden mobile-full-width" id="mobile-banner" style="height: 400px;">
  <!-- Banner Carousel -->
  <div class="banner-carousel absolute inset-0">
    <!-- Banner 1 -->
    <div class="banner-slide active absolute inset-0">
      <img 
        src="/images/optimized/banner3.webp" 
        alt="Banner 1" 
        class="w-full h-full object-cover"
        loading="eager"
        fetchpriority="high"
        decoding="async"
        width="1920"
        height="400"
      />
    </div>
    
    <!-- Banner 2 -->
    <div class="banner-slide absolute inset-0">
      <img 
        src="/images/optimized/banner222.webp" 
        alt="Banner 2" 
        class="w-full h-full object-cover"
        loading="lazy"
        decoding="async"
        width="1920"
        height="400"
      />
    </div>
    
    <!-- Banner 3 -->
    <div class="banner-slide absolute inset-0">
      <img 
        src="/images/optimized/banner.webp" 
        alt="Banner 3" 
        class="w-full h-full object-cover"
        loading="lazy"
        decoding="async"
        width="1920"
        height="400"
      />
    </div>
  </div>
  
  <!-- Progress Bar Controller - 在移动端隐藏 -->
  <div class="progress-controller absolute bottom-8 left-1/2 transform -translate-x-1/2 flex items-center justify-center space-x-8 z-10 hidden md:flex">
    <!-- PREV Label -->
    <button id="prev-label" class="slide-label text-white text-lg font-medium tracking-wider flex items-center justify-center">PREV</button>
    
    <!-- Progress Bar Background -->
    <div class="relative w-96 flex items-center justify-center" style="height: 2px; background-color: rgba(255,255,255,0.2)">
      <!-- Progress Fill -->
      <div id="progress-fill" class="absolute left-0 top-0 h-full" style="width: 0%; background-color: rgba(255,255,255,1)"></div>
    </div>
    
    <!-- NEXT Label -->
    <button id="next-label" class="slide-label text-white text-lg font-medium tracking-wider flex items-center justify-center">NEXT</button>
  </div>


  

</section>

<script>
  let currentSlide = 0;
  const slides = document.querySelectorAll('.banner-slide');
  const progressFill = document.getElementById('progress-fill');
  const totalSlides = slides.length;
  const slideInterval = 3000; // 3 seconds
  let autoSlideInterval: ReturnType<typeof setInterval> | undefined;
  let progressInterval: ReturnType<typeof setInterval> | undefined;
  let progressStartTime = 0;
  let pausedProgress = 0; // Store paused progress
  let isPaused = false;

  // Show specific slide
  function showSlide(index: number) {
    if (window.innerWidth <= 768) {
      // 移动端：使用display控制，高度自适应
      slides.forEach((slide, i) => {
        const slideElement = slide as HTMLElement;
        slideElement.style.display = i === index ? 'block' : 'none';
        if (i === index) {
          slide.classList.add('active');
        } else {
          slide.classList.remove('active');
        }
      });
    } else {
      // 桌面端：使用opacity控制
      slides.forEach(slide => slide.classList.remove('active'));
      slides[index].classList.add('active');
    }
    
    currentSlide = index;
    resetProgress();
  }

  // Reset and start progress bar
  function resetProgress() {
    if (progressFill) {
      progressFill.style.width = '0%';
      console.log('Progress reset to 0%');
    }
    pausedProgress = 0;
    stopProgress();
    startProgress();
  }

  // Start progress bar animation - 优化性能
  function startProgress() {
    if (!progressFill) return;
    
    isPaused = false;
    progressStartTime = Date.now() - (pausedProgress * slideInterval / 100);
    
    // 使用requestAnimationFrame替代setInterval，性能更好
    function updateProgress() {
      if (isPaused || !progressFill) return;
      
      const elapsed = Date.now() - progressStartTime;
      const progress = Math.min((elapsed / slideInterval) * 100, 100);
      progressFill.style.width = `${progress}%`;
      
      if (progress >= 100) {
        stopProgress();
      } else {
        requestAnimationFrame(updateProgress);
      }
    }
    
    requestAnimationFrame(updateProgress);
  }

  // Stop progress bar
  function stopProgress() {
    if (progressInterval) {
      clearInterval(progressInterval);
      progressInterval = undefined;
    }
  }

  // Pause progress bar
  function pauseProgress() {
    if (!isPaused) {
      const elapsed = Date.now() - progressStartTime;
      pausedProgress = Math.min((elapsed / slideInterval) * 100, 100);
      isPaused = true;
    }
  }

  // Resume progress bar
  function resumeProgress() {
    if (isPaused) {
      startProgress();
    }
  }

  // Next slide
  function nextSlide() {
    const next = (currentSlide + 1) % totalSlides;
    showSlide(next);
  }

  // Previous slide
  function prevSlide() {
    const prev = (currentSlide - 1 + totalSlides) % totalSlides;
    showSlide(prev);
  }

  // Auto slide
  function startAutoSlide() {
    autoSlideInterval = setInterval(nextSlide, slideInterval);
    startProgress();
  }

  function stopAutoSlide() {
    if (autoSlideInterval) {
      clearInterval(autoSlideInterval);
      autoSlideInterval = undefined;
    }
    stopProgress();
  }

  // Touch and swipe functionality
  let startX = 0;
  let startY = 0;
  let isDragging = false;

  function handleTouchStart(e: TouchEvent) {
    startX = e.touches[0].clientX;
    startY = e.touches[0].clientY;
    isDragging = true;
    stopAutoSlide();
  }

  function handleTouchMove(e: TouchEvent) {
    if (!isDragging) return;
    
    const currentX = e.touches[0].clientX;
    const currentY = e.touches[0].clientY;
    const diffX = startX - currentX;
    const diffY = startY - currentY;
    
    // Prevent vertical scrolling if horizontal swipe is detected
    if (Math.abs(diffX) > Math.abs(diffY)) {
      e.preventDefault();
    }
  }

  function handleTouchEnd(e: TouchEvent) {
    if (!isDragging) return;
    
    const endX = e.changedTouches[0].clientX;
    const endY = e.changedTouches[0].clientY;
    const diffX = startX - endX;
    const diffY = startY - endY;
    
    // Only trigger if horizontal swipe is more significant than vertical
    if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
      if (diffX > 0) {
        // Swiped left - next slide
        nextSlide();
      } else {
        // Swiped right - previous slide
        prevSlide();
      }
    }
    
    isDragging = false;
    startAutoSlide(); // Restart auto slide
  }

  // Mouse drag functionality for desktop
  function handleMouseDown(e: MouseEvent) {
    startX = e.clientX;
    startY = e.clientY;
    isDragging = true;
    stopAutoSlide();
    e.preventDefault();
  }

  function handleMouseMove(e: MouseEvent) {
    if (!isDragging) return;
    e.preventDefault();
  }

  function handleMouseUp(e: MouseEvent) {
    if (!isDragging) return;
    
    const endX = e.clientX;
    const endY = e.clientY;
    const diffX = startX - endX;
    const diffY = startY - endY;
    
    // Only trigger if horizontal drag is more significant than vertical
    if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
      if (diffX > 0) {
        // Dragged left - next slide
        nextSlide();
      } else {
        // Dragged right - previous slide
        prevSlide();
      }
    }
    
    isDragging = false;
    startAutoSlide(); // Restart auto slide
  }



  // Add click listeners for PREV/NEXT labels
  const prevLabel = document.getElementById('prev-label');
  const nextLabel = document.getElementById('next-label');
  
  if (prevLabel) {
    prevLabel.addEventListener('click', () => {
      prevSlide();
      stopAutoSlide();
      startAutoSlide(); // Restart auto slide
    });
  }
  
  if (nextLabel) {
    nextLabel.addEventListener('click', () => {
      nextSlide();
      stopAutoSlide();
      startAutoSlide(); // Restart auto slide
    });
  }

  // Add event listeners for touch and mouse events
  const carousel = document.querySelector('.banner-carousel') as HTMLElement;
  if (carousel) {
    // Touch events
    carousel.addEventListener('touchstart', handleTouchStart as EventListener, { passive: false });
    carousel.addEventListener('touchmove', handleTouchMove as EventListener, { passive: false });
    carousel.addEventListener('touchend', handleTouchEnd as EventListener, { passive: false });
    
    // Mouse events for desktop
    carousel.addEventListener('mousedown', handleMouseDown as EventListener);
    carousel.addEventListener('mousemove', handleMouseMove as EventListener);
    carousel.addEventListener('mouseup', handleMouseUp as EventListener);
    carousel.addEventListener('mouseleave', handleMouseUp as EventListener); // Handle mouse leaving area
    

  }

  // Add click listeners for mobile indicators
  const indicators = document.querySelectorAll('.indicator');
  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      showSlide(index);
      stopAutoSlide();
      startAutoSlide(); // Restart auto slide
    });
  });

  // 确保移动端100%宽度显示，高度自适应
  function ensureMobileFullWidth() {
    if (window.innerWidth <= 768) {
      const banner = document.getElementById('mobile-banner') as HTMLElement;
      
      if (banner) {
        banner.style.cssText = `
          position: relative !important;
          width: 100vw !important;
          height: auto !important;
          left: 50% !important;
          margin-left: -50vw !important;
          margin-right: -50vw !important;
          padding: 0 !important;
          max-width: none !important;
          overflow: hidden !important;
        `;
        
        // 设置第一张图片显示，其他隐藏
        const slides = banner.querySelectorAll('.banner-slide') as NodeListOf<HTMLElement>;
        slides.forEach((slide, index) => {
          slide.style.display = index === 0 ? 'block' : 'none';
        });
      }
    }
  }

  // 页面加载时执行 - 延迟非关键操作
  function initBanner() {
    ensureMobileFullWidth();
    window.addEventListener('resize', ensureMobileFullWidth);
    
    // 延迟启动自动播放，让页面先渲染
    requestAnimationFrame(() => {
      startAutoSlide();
    });
  }
  
  // 使用更高效的初始化方式
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initBanner);
  } else {
    // 如果DOM已加载，延迟执行避免阻塞渲染
    setTimeout(initBanner, 0);
  }
</script>

<style>
  /* Banner基础样式 */
  section {
    width: 100%;
    height: 400px;
  }
  
  /* 移动端全屏显示 - 突破父容器限制 */
  .mobile-full-width {
    box-sizing: border-box;
  }
  
  /* Banner slide transitions - 使用transform优化性能 */
  .banner-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transform: translateZ(0); /* 启用硬件加速 */
    transition: opacity 0.8s ease-in-out;
    will-change: opacity; /* 提示浏览器优化 */
  }
  
  .banner-slide.active {
    opacity: 1;
  }
  
  /* Banner images - 确保移动端完全覆盖 */
  .banner-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transform: translateZ(0); /* 硬件加速 */
    backface-visibility: hidden; /* 避免重绘 */
  }
  
  /* 移动端优化 - 宽度100%，高度自适应 */
  @media (max-width: 768px) {
    .mobile-full-width {
      position: relative !important;
      width: 100vw !important;
      height: auto !important;
      left: 50% !important;
      margin-left: -50vw !important;
      margin-right: -50vw !important;
      margin-top: 0 !important;
      margin-bottom: 0 !important;
      padding: 0 !important;
      max-width: none !important;
      z-index: 1 !important;
    }
    
    .banner-carousel {
      position: relative !important;
      width: 100% !important;
      height: auto !important;
      margin: 0 !important;
      padding: 0 !important;
    }
    
    .banner-slide {
      position: relative !important;
      width: 100% !important;
      height: auto !important;
      margin: 0 !important;
      padding: 0 !important;
      display: none !important;
    }
    
    .banner-slide.active {
      display: block !important;
    }
    
    .banner-slide img {
      width: 100% !important;
      height: auto !important;
      object-fit: contain !important;
      object-position: center !important;
      max-width: none !important;
      margin: 0 !important;
      padding: 0 !important;
      display: block !important;
    }
    
    /* 移动端隐藏桌面版进度条控制器 */
    .progress-controller {
      display: none !important;
    }
    

  }
  
  /* Add cursor pointer for carousel to indicate it's interactive */
  .banner-carousel {
    cursor: grab;
  }
  
  .banner-carousel:active {
    cursor: grabbing;
  }
  
  /* 移动端取消抓取光标 */
  @media (max-width: 768px) {
    .banner-carousel {
      cursor: default;
    }
    
    .banner-carousel:active {
      cursor: default;
    }
  }
  
  /* Progress bar styling */
  #progress-fill {
    background: white;
  }
  
  /* Slide labels styling */
  .slide-label {
    background: none;
    border: none;
    color: white;
    font-size: inherit;
    font-weight: inherit;
    letter-spacing: inherit;
    padding: 0;
    margin: 0;
    cursor: pointer;
    user-select: none;
  }
  
  .slide-label:hover {
    opacity: 0.8;
  }
  
  /* 确保移动端触摸友好 */
  @media (max-width: 768px) {
    
    /* 额外确保移动端100%宽度 */
    body .mobile-full-width {
      position: relative !important;
      width: 100vw !important;
      left: 50% !important;
      margin-left: -50vw !important;
    }
    
    /* 防止父容器限制宽度 */
    * {
      box-sizing: border-box;
    }
  }
  
  /* 小屏幕设备额外优化 */
  @media (max-width: 480px) {
    .mobile-full-width {
      position: fixed !important;
      top: 0 !important;
      left: 0 !important;
      right: 0 !important;
      bottom: 0 !important;
      width: 100vw !important;
      height: 100vh !important;
      margin: 0 !important;
      padding: 0 !important;
      transform: none !important;
    }
  }
  
  /* 全局重置 - 确保移动端无边距 */
  @media (max-width: 768px) {
    html, body {
      margin: 0 !important;
      padding: 0 !important;
      width: 100% !important;
      overflow-x: hidden !important;
    }
    
    main {
      margin: 0 !important;
      padding: 0 !important;
      width: 100% !important;
      max-width: none !important;
    }
    
    #main-content {
      margin: 0 !important;
      padding: 0 !important;
      width: 100% !important;
      max-width: none !important;
    }
    
    /* 重置所有可能影响宽度的父容器 */
    .mobile-full-width * {
      max-width: none !important;
    }
    
    /* 强制重置容器样式 */
    .container, .max-w-7xl, .max-w-6xl, .max-w-5xl, .max-w-4xl {
      max-width: none !important;
      width: 100% !important;
      margin: 0 !important;
      padding: 0 !important;
    }
    
    /* 简化的移动端宽度100%解决方案 */
    .mobile-full-width {
      width: 100vw !important;
      max-width: none !important;
      box-sizing: border-box !important;
    }
    
    /* 确保图片100%宽度显示 */
    .mobile-full-width .banner-slide img {
      width: 100% !important;
      height: 100% !important;
      max-width: none !important;
      object-fit: cover !important;
    }
  }
</style> 