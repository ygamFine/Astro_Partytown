---
// FullScreenBanner.astro - 移动端优化版本
---

<!-- Preload critical banner images for LCP optimization -->
<link rel="preload" as="image" href="/images/optimized/banner3.webp" type="image/webp" fetchpriority="high">
<link rel="preload" as="image" href="/images/optimized/banner222.webp" type="image/webp" fetchpriority="low">
<link rel="preload" as="image" href="/images/optimized/banner.webp" type="image/webp" fetchpriority="low">

<section class="banner-container" id="banner-section">
  <!-- Banner Carousel -->
  <div class="banner-carousel">
    <!-- Banner 1 -->
    <div class="banner-slide active">
      <picture>
        <source srcset="/images/optimized/banner3.webp" type="image/webp">
        <img 
          src="/images/optimized/banner3.jpg" 
          alt="Banner 1" 
          class="banner-image"
          loading="eager"
          fetchpriority="high"
          decoding="async"
          width="1920"
          height="400"
        />
      </picture>
    </div>
    
    <!-- Banner 2 -->
    <div class="banner-slide">
      <picture>
        <source srcset="/images/optimized/banner222.webp" type="image/webp">
        <img 
          src="/images/optimized/banner222.jpg" 
          alt="Banner 2" 
          class="banner-image"
          loading="lazy"
          decoding="async"
          width="1920"
          height="400"
        />
      </picture>
    </div>
    
    <!-- Banner 3 -->
    <div class="banner-slide">
      <picture>
        <source srcset="/images/optimized/banner.webp" type="image/webp">
        <img 
          src="/images/optimized/banner.jpg" 
          alt="Banner 3" 
          class="banner-image"
          loading="lazy"
          decoding="async"
          width="1920"
          height="400"
        />
      </picture>
    </div>
  </div>
  
  <!-- Desktop Progress Bar Controller -->
  <div class="progress-controller">
    <button id="prev-label" class="slide-label">PREV</button>
    <div class="progress-bar">
      <div id="progress-fill" class="progress-fill"></div>
    </div>
    <button id="next-label" class="slide-label">NEXT</button>
  </div>
</section>

<script>
  class BannerCarousel {
    private currentSlide = 0;
    private slides: NodeListOf<HTMLElement>;
    private progressFill: HTMLElement | null;
    private totalSlides: number;
    private slideInterval = 3000;
    private autoSlideTimer: ReturnType<typeof setInterval> | null = null;
    private progressTimer: ReturnType<typeof requestAnimationFrame> | null = null;
    private progressStartTime = 0;
    private pausedProgress = 0;
    private isPaused = false;
    private isDragging = false;
    private startX = 0;
    private startY = 0;

    constructor() {
      this.slides = document.querySelectorAll('.banner-slide');
      this.progressFill = document.getElementById('progress-fill');
      this.totalSlides = this.slides.length;
      this.init();
    }

    private init() {
      this.setupEventListeners();
      this.startAutoSlide();
    }

    private setupEventListeners() {
      // Desktop controls
      const prevBtn = document.getElementById('prev-label');
      const nextBtn = document.getElementById('next-label');
      
      prevBtn?.addEventListener('click', () => this.prevSlide());
      nextBtn?.addEventListener('click', () => this.nextSlide());

      // Touch events for mobile
      const carousel = document.querySelector('.banner-carousel') as HTMLElement;
      if (carousel) {
        carousel.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: false });
        carousel.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false });
        carousel.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: false });
        
        // Mouse events for desktop
        carousel.addEventListener('mousedown', this.handleMouseDown.bind(this));
        carousel.addEventListener('mousemove', this.handleMouseMove.bind(this));
        carousel.addEventListener('mouseup', this.handleMouseUp.bind(this));
        carousel.addEventListener('mouseleave', this.handleMouseUp.bind(this));
      }

      // Visibility change handling
      document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
          this.stopAutoSlide();
        } else {
          this.startAutoSlide();
        }
      });
    }

    private showSlide(index: number) {
      this.slides.forEach((slide, i) => {
        slide.classList.toggle('active', i === index);
      });
      
      this.currentSlide = index;
      this.resetProgress();
    }

    private nextSlide() {
      const next = (this.currentSlide + 1) % this.totalSlides;
      this.showSlide(next);
    }

    private prevSlide() {
      const prev = (this.currentSlide - 1 + this.totalSlides) % this.totalSlides;
      this.showSlide(prev);
    }

    private startAutoSlide() {
      this.stopAutoSlide();
      this.autoSlideTimer = setInterval(() => this.nextSlide(), this.slideInterval);
      this.startProgress();
    }

    private stopAutoSlide() {
      if (this.autoSlideTimer) {
        clearInterval(this.autoSlideTimer);
        this.autoSlideTimer = null;
      }
      this.stopProgress();
    }

    private startProgress() {
      if (!this.progressFill) return;
      
      this.isPaused = false;
      this.progressStartTime = Date.now() - (this.pausedProgress * this.slideInterval / 100);
      
      const updateProgress = () => {
        if (this.isPaused || !this.progressFill) return;
        
        const elapsed = Date.now() - this.progressStartTime;
        const progress = Math.min((elapsed / this.slideInterval) * 100, 100);
        
        this.progressFill.style.transform = `scaleX(${progress / 100})`;
        
        if (progress >= 100) {
          this.stopProgress();
        } else {
          this.progressTimer = requestAnimationFrame(updateProgress);
        }
      };
      
      this.progressTimer = requestAnimationFrame(updateProgress);
    }

    private stopProgress() {
      if (this.progressTimer) {
        cancelAnimationFrame(this.progressTimer);
        this.progressTimer = null;
      }
    }

    private resetProgress() {
      if (this.progressFill) {
        this.progressFill.style.transform = 'scaleX(0)';
      }
      this.pausedProgress = 0;
      this.stopProgress();
      this.startProgress();
    }

    private handleTouchStart(e: TouchEvent) {
      this.startX = e.touches[0].clientX;
      this.startY = e.touches[0].clientY;
      this.isDragging = true;
      this.stopAutoSlide();
    }

    private handleTouchMove(e: TouchEvent) {
      if (!this.isDragging) return;
      
      const currentX = e.touches[0].clientX;
      const currentY = e.touches[0].clientY;
      const diffX = this.startX - currentX;
      const diffY = this.startY - currentY;
      
      // Prevent vertical scrolling if horizontal swipe is detected
      if (Math.abs(diffX) > Math.abs(diffY)) {
        e.preventDefault();
      }
    }

    private handleTouchEnd(e: TouchEvent) {
      if (!this.isDragging) return;
      
      const endX = e.changedTouches[0].clientX;
      const diffX = this.startX - endX;
      
      if (Math.abs(diffX) > 50) {
        if (diffX > 0) {
          this.nextSlide();
        } else {
          this.prevSlide();
        }
      }
      
      this.isDragging = false;
      this.startAutoSlide();
    }

    private handleMouseDown(e: MouseEvent) {
      this.startX = e.clientX;
      this.isDragging = true;
      this.stopAutoSlide();
      e.preventDefault();
    }

    private handleMouseMove(e: MouseEvent) {
      if (!this.isDragging) return;
      e.preventDefault();
    }

    private handleMouseUp(e: MouseEvent) {
      if (!this.isDragging) return;
      
      const endX = e.clientX;
      const diffX = this.startX - endX;
      
      if (Math.abs(diffX) > 50) {
        if (diffX > 0) {
          this.nextSlide();
        } else {
          this.prevSlide();
        }
      }
      
      this.isDragging = false;
      this.startAutoSlide();
    }
  }

  // Initialize when DOM is ready
  function initBanner() {
    new BannerCarousel();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initBanner);
  } else {
    initBanner();
  }
</script>

<style>
  /* 基础容器样式 - 优化性能 */
  .banner-container {
    position: relative;
    width: 100%;
    height: 400px;
    overflow: hidden;
    background-color: #f3f4f6; /* 预设背景色避免CLS */
    contain: layout style; /* 性能优化 */
  }

  /* 移动端优化 */
  @media (max-width: 768px) {
    .banner-container {
      width: 100vw;
      height: 250px;
      left: 50%;
      margin-left: -50vw;
      position: relative;
    }
  }

  /* 轮播容器 */
  .banner-carousel {
    position: relative;
    width: 100%;
    height: 100%;
    cursor: grab;
  }

  .banner-carousel:active {
    cursor: grabbing;
  }

  @media (max-width: 768px) {
    .banner-carousel {
      cursor: default;
    }
    
    .banner-carousel:active {
      cursor: default;
    }
  }

  /* 轮播项 - 性能优化 */
  .banner-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.5s ease-out;
    will-change: opacity;
    transform: translate3d(0, 0, 0); /* GPU加速 */
  }

  .banner-slide.active {
    opacity: 1;
  }

  /* 图片样式 - 优化渲染 */
  .banner-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    display: block;
    transform: translate3d(0, 0, 0); /* GPU加速 */
  }

  /* 桌面端进度条控制器 */
  .progress-controller {
    position: absolute;
    bottom: 32px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    align-items: center;
    gap: 32px;
    z-index: 10;
  }

  @media (max-width: 768px) {
    .progress-controller {
      display: none;
    }
  }

  /* 进度条 */
  .progress-bar {
    width: 384px;
    height: 2px;
    background-color: rgba(255, 255, 255, 0.2);
    position: relative;
  }

  .progress-fill {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    background-color: rgba(255, 255, 255, 1);
    transform: scaleX(0);
    transform-origin: left;
    transition: none;
    will-change: transform;
  }

  /* 控制按钮 */
  .slide-label {
    background: none;
    border: none;
    color: white;
    font-size: 18px;
    font-weight: 500;
    letter-spacing: 0.05em;
    cursor: pointer;
    user-select: none;
    transition: opacity 0.2s ease;
  }

  .slide-label:hover {
    opacity: 0.8;
  }

  /* 性能优化 */
  .banner-slide,
  .banner-image {
    transform: translate3d(0, 0, 0);
    backface-visibility: hidden;
  }

  /* 移动端触摸优化 */
  @media (max-width: 768px) {
    .banner-container {
      touch-action: pan-x;
    }
    
    .banner-carousel {
      -webkit-overflow-scrolling: touch;
    }
  }
</style> 