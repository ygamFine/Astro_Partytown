---
// 纯SSG数据更新检查组件 - 仅提示，不修改DOM
---

<script type="module">
  // 构建时间戳 (用于比较数据新旧)
  const BUILD_TIME = document.documentElement.getAttribute('data-build-time') || Date.now();
  
  // 检查是否有数据更新 (纯SSG方式)
  async function checkForUpdates() {
    try {
      // 尝试访问Strapi公共API (如果可用)
      const response = await fetch('http://47.251.126.80/api/menus?populate=*', {
        method: 'GET',
        cache: 'no-cache',
        mode: 'cors'
      });
      
      if (!response.ok) {
        console.log('⚠️ 无法连接到Strapi API，建议刷新页面');
        return false;
      }
      
      const data = await response.json();
      const menus = data.data || [];
      
      if (!Array.isArray(menus) || menus.length === 0) {
        console.log('⚠️ 未获取到菜单数据');
        return false;
      }
      
      // 检查是否有新的更新时间
      const latestUpdate = Math.max(...menus.map(item => 
        new Date(item.updatedAt || item.publishedAt).getTime()
      ));
      
      return latestUpdate > BUILD_TIME;
      
    } catch (error) {
      console.log('⚠️ 数据检查失败，建议刷新页面:', error.message);
      return false;
    }
  }
  
  // SSG标准：不直接更新数据，而是提示用户刷新
  function showRefreshNotification() {
    const notification = document.createElement('div');
    notification.className = 'fixed top-20 right-4 bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 cursor-pointer transition-all duration-300';
    notification.innerHTML = `
      <div class="flex items-center space-x-2">
        <svg class="w-5 h-5 animate-spin" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"></path>
        </svg>
        <span>发现数据更新，点击刷新</span>
      </div>
    `;
    
    notification.addEventListener('click', () => {
      window.location.reload();
    });
    
    document.body.appendChild(notification);
    
    // 30秒后自动消失
    setTimeout(() => {
      if (notification.parentNode) {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }
    }, 30000);
  }
  

  
  // 显示SSG模式信息
  function showSSGInfo() {
    console.log(`
🏗️ 静态站点生成模式 (SSG)
✅ 构建时间: ${new Date(BUILD_TIME).toLocaleString()}
✅ 所有内容在构建时预生成
✅ 数据更新通过重新构建网站实现
⏰ 每10分钟自动检查并重新构建
    `);
  }
  
  // SSG同步逻辑 (仅检查和提示)
  async function checkDataUpdates() {
    console.log('🔄 SSG模式：检查数据更新...');
    
    const hasUpdates = await checkForUpdates();
    
    if (hasUpdates) {
      console.log('📥 发现数据更新，建议刷新页面获取最新构建版本');
      showRefreshNotification();
    } else {
      console.log('✅ 当前显示的是最新数据');
    }
  }
  
  // 初始化SSG数据检查器
  function initSSGChecker() {
    // 显示SSG模式信息
    showSSGInfo();
    
    // 设置构建时间标记
    if (!document.documentElement.getAttribute('data-build-time')) {
      document.documentElement.setAttribute('data-build-time', Date.now());
    }
    
    // 延迟检查 (不影响首屏性能)
    setTimeout(checkDataUpdates, 10000);
    
    // 定期检查 (频率较低，符合SSG实践)
    setInterval(checkDataUpdates, 900000); // 15分钟
    
    // 用户重新访问时检查
    document.addEventListener('visibilitychange', () => {
      if (!document.hidden) {
        setTimeout(checkDataUpdates, 5000);
      }
    });
    
    console.log('🚀 SSG数据检查器已启动');
  }
  
  // DOM加载完成后启动
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSSGChecker);
  } else {
    initSSGChecker();
  }
</script>

<!-- 在HTML中标记构建时间 -->
<script is:inline>
  document.documentElement.setAttribute('data-build-time', Date.now());
</script> 