---
// 增强版静态菜单组件 - SSG渲染 + 客户端动态更新
import { getMenus } from '../lib/strapi.js';

// 构建时获取菜单数据作为初始数据
let initialMenuItems = [];
try {
  initialMenuItems = await getMenus();
  console.log(`✅ 构建时获取到 ${initialMenuItems.length} 个菜单项`);
} catch (error) {
  console.warn('⚠️ 构建时获取菜单失败，使用默认菜单:', error.message);
  // 默认菜单作为降级方案
  initialMenuItems = [
    { name: '首页', path: '/' },
    { name: '产品中心', path: '/products' },
    { name: '新闻中心', path: '/news' },
    { name: '关于我们', path: '/about' },
    { name: '联系我们', path: '/contact' }
  ];
}

// 将初始数据转换为JSON字符串，供客户端使用
const initialMenuData = JSON.stringify(initialMenuItems);
---

<!-- 桌面端菜单容器 -->
<nav id="desktop-menu" class="hidden md:flex items-center space-x-8" aria-label="主要导航">
  {initialMenuItems.map((item) => (
    <a 
      href={item.path} 
      class="menu-item text-gray-600 hover:text-red-600 font-semibold focus-visible-ring transition-all duration-200"
    >
      {item.name}
    </a>
  ))}
</nav>

<!-- 移动端菜单内容 -->
<div id="mobile-menu-items" class="hidden">
  {initialMenuItems.map((item) => (
    <a 
      href={item.path} 
      class="block text-gray-700 rounded-lg px-4 py-3 font-semibold focus-visible-ring touch-manipulation mobile-menu-item"
    >
      {item.name}
    </a>
  ))}
</div>

<!-- 更新状态指示器 -->
<div id="menu-update-indicator" class="hidden fixed top-4 right-4 bg-blue-500 text-white px-3 py-1 rounded-full text-sm z-50">
  菜单更新中...
</div>

<script define:vars={{initialMenuData}}>
  class EnhancedMenuManager {
    constructor() {
      this.menuData = JSON.parse(initialMenuData);
      this.updateInterval = 30000; // 30秒检查一次
      this.isUpdating = false;
      this.retryCount = 0;
      this.maxRetries = 3;
      
      this.init();
    }
    
    init() {
      // 初始化移动端菜单
      this.initMobileMenu();
      
      // 启动定时更新
      this.startPeriodicUpdate();
      
      // 页面可见性变化时更新
      this.setupVisibilityListener();
      
      // 网络状态变化时更新
      this.setupNetworkListener();
      
      console.log('🚀 增强菜单管理器已启动');
    }
    
    initMobileMenu() {
      const mobileMenuItems = document.getElementById('mobile-menu-items');
      const mobileContainer = document.getElementById('mobile-smart-menu');
      
      if (mobileMenuItems && mobileContainer) {
        mobileContainer.innerHTML = mobileMenuItems.innerHTML;
        
        // 为移动端菜单项添加点击关闭事件
        mobileContainer.querySelectorAll('.mobile-menu-item').forEach(link => {
          link.addEventListener('click', () => {
            this.closeMobileMenu();
          });
        });
      }
    }
    
    closeMobileMenu() {
      const mobileMenu = document.getElementById('mobile-menu');
      const menuButton = document.getElementById('mobile-menu-button');
      const openIcon = document.getElementById('menu-open-icon');
      const closeIcon = document.getElementById('menu-close-icon');
      
      if (mobileMenu) {
        mobileMenu.classList.add('hidden');
        if (menuButton) menuButton.setAttribute('aria-expanded', 'false');
        if (openIcon) openIcon.classList.remove('hidden');
        if (closeIcon) closeIcon.classList.add('hidden');
      }
    }
    
    async updateMenus() {
      if (this.isUpdating) return;
      
      this.isUpdating = true;
      this.showUpdateIndicator();
      
      try {
        console.log('🔄 检查菜单更新...');
        
        // 构建API URL
        const apiUrl = `${window.location.origin}/api/strapi-proxy?endpoint=menus`;
        
        const response = await fetch(apiUrl, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        });
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const newMenuData = await response.json();
        
        // 检查数据是否有变化
        if (JSON.stringify(newMenuData) !== JSON.stringify(this.menuData)) {
          console.log('📝 菜单数据已更新');
          this.menuData = newMenuData;
          this.renderMenus();
          this.showUpdateSuccess();
        } else {
          console.log('✅ 菜单数据无变化');
        }
        
        this.retryCount = 0; // 重置重试计数
        
      } catch (error) {
        console.warn('⚠️ 菜单更新失败:', error.message);
        this.handleUpdateError();
      } finally {
        this.isUpdating = false;
        this.hideUpdateIndicator();
      }
    }
    
    renderMenus() {
      // 更新桌面端菜单
      const desktopMenu = document.getElementById('desktop-menu');
      if (desktopMenu) {
        desktopMenu.innerHTML = this.menuData.map(item => 
          `<a href="${item.path}" class="menu-item text-gray-600 hover:text-red-600 font-semibold focus-visible-ring transition-all duration-200">${item.name}</a>`
        ).join('');
      }
      
      // 更新移动端菜单
      const mobileMenuItems = document.getElementById('mobile-menu-items');
      if (mobileMenuItems) {
        mobileMenuItems.innerHTML = this.menuData.map(item => 
          `<a href="${item.path}" class="block text-gray-700 rounded-lg px-4 py-3 font-semibold focus-visible-ring touch-manipulation mobile-menu-item">${item.name}</a>`
        ).join('');
        
        // 重新初始化移动端菜单
        this.initMobileMenu();
      }
    }
    
    handleUpdateError() {
      this.retryCount++;
      if (this.retryCount < this.maxRetries) {
        console.log(`🔄 ${this.retryCount}/${this.maxRetries} 次重试...`);
        setTimeout(() => this.updateMenus(), 5000 * this.retryCount);
      } else {
        console.error('❌ 菜单更新失败，已达到最大重试次数');
        this.retryCount = 0;
      }
    }
    
    startPeriodicUpdate() {
      setInterval(() => {
        if (document.visibilityState === 'visible') {
          this.updateMenus();
        }
      }, this.updateInterval);
      
      // 立即执行一次更新
      setTimeout(() => this.updateMenus(), 1000);
    }
    
    setupVisibilityListener() {
      document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
          // 页面变为可见时立即更新
          setTimeout(() => this.updateMenus(), 500);
        }
      });
    }
    
    setupNetworkListener() {
      if ('navigator' in window && 'onLine' in navigator) {
        window.addEventListener('online', () => {
          console.log('🌐 网络已连接，更新菜单');
          this.updateMenus();
        });
      }
    }
    
    showUpdateIndicator() {
      const indicator = document.getElementById('menu-update-indicator');
      if (indicator) {
        indicator.classList.remove('hidden');
      }
    }
    
    hideUpdateIndicator() {
      const indicator = document.getElementById('menu-update-indicator');
      if (indicator) {
        indicator.classList.add('hidden');
      }
    }
    
    showUpdateSuccess() {
      const indicator = document.getElementById('menu-update-indicator');
      if (indicator) {
        indicator.textContent = '菜单已更新 ✅';
        indicator.classList.remove('bg-blue-500');
        indicator.classList.add('bg-green-500');
        
        setTimeout(() => {
          indicator.textContent = '菜单更新中...';
          indicator.classList.remove('bg-green-500');
          indicator.classList.add('bg-blue-500');
        }, 2000);
      }
    }
  }
  
  // DOM就绪后初始化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      window.enhancedMenuManager = new EnhancedMenuManager();
    });
  } else {
    window.enhancedMenuManager = new EnhancedMenuManager();
  }
</script>

<style>
  .menu-item {
    position: relative;
    overflow: hidden;
  }
  
  .menu-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(239, 68, 68, 0.1), transparent);
    transition: left 0.5s;
  }
  
  .menu-item:hover::before {
    left: 100%;
  }
  
  /* 移动端优化 */
  @media (max-width: 768px) {
    .mobile-menu-item {
      padding: 12px 16px;
      font-size: 16px;
    }
  }
  
  /* 更新指示器动画 */
  #menu-update-indicator {
    animation: slideInRight 0.3s ease-out;
  }
  
  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
</style> 