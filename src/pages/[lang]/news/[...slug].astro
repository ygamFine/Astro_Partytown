---
import SecondaryPageLayout from "@components/templates/layout/SecondaryPageLayout.astro";
import GridList from "@components/templates/common/GridList.astro";
import RelatedNews from "@components/templates/common/RelatedNews.astro";
import PopularArticles from "@components/templates/common/PopularArticles.astro";
import PageNavigation from "@components/templates/common/PageNavigation.astro";
import EmptyState from "@components/templates/common/EmptyState.astro";
import { getNews, getProducts } from "@apis/common";
import { getDictionary } from "@i18n/dictionaries";
import { getFirstImage, formatDate, generateUrl } from "@utils/tools.js";
import { SUPPORTED_LANGUAGES } from "@utils/i18n-routes";
import { generateNewsDetailBreadcrumbs } from "@utils/breadcrumbUtils.js";

export async function getStaticPaths() {
  // 只为配置中启用的语言和产品生成静态路径
  const paths: any[] = [];

  for (const lang of SUPPORTED_LANGUAGES) {
    const news = await getNews(lang);
    for (const newsItem of news) {
      // 仅为有有效 slug 的产品生成详情页
      if (newsItem && typeof newsItem.url_slug === "string" && newsItem.url_slug.trim().length > 0 ) {
        const cleanSlug = newsItem.url_slug.startsWith('/') ? newsItem.url_slug.slice(1) : newsItem.url_slug;
        paths.push({
          params: { lang, slug: cleanSlug },
          props: { slug: newsItem.url_slug, lang, news, newsItem },
        });
      }
    }
  }

  return paths;
}

const { lang, news, newsItem } = Astro.props;

// 如果产品不存在，返回404
if (!newsItem) {
  return Astro.redirect("/404");
}

// 检查是否有新闻数据
const hasNews = newsItem !== null;

// 加载国际化翻译
const t = await getDictionary(lang);

// 获取当前产品在列表中的位置，用于上一个/下一个导航
const currentIndex = news.findIndex(
  (p: any) => p.url_slug === newsItem.url_slug,
);
const previousNews = currentIndex > 0 ? news[currentIndex - 1] : null;
const nextNews = currentIndex < news.length - 1 ? news[currentIndex + 1] : null;

// 获取3个相关产品（随机）
const products = await getProducts(lang);
const shuffledProducts = products.sort(() => 0.5 - Math.random());
const relatedProducts = shuffledProducts.slice(0, 3);

// 获取相关新闻 (最新的4篇，排除当前文章) -> 用于主内容区底部
const allNews = await getNews(lang);
const relatedNews = allNews
  .filter((item: any) => item.url_slug !== news.url_slug)
  .sort(
    (a: any, b: any) => new Date(b.date).getTime() - new Date(a.date).getTime(),
  )
  .slice(0, 4);

// 获取热门文章 (最新的5篇，排除当前文章) -> 用于右侧边栏
const popularArticles = allNews
  .filter((item: any) => item.url_slug !== news.url_slug)
  .sort(
    (a: any, b: any) => new Date(b.date).getTime() - new Date(a.date).getTime(),
  )
  .slice(0, 5);

  // 面包屑导航
const breadcrumbs = hasNews ? generateNewsDetailBreadcrumbs(lang, newsItem.title, newsItem.news_category?.url_slug) : [];
---
<>
{ !hasNews ? (
  <SecondaryPageLayout
    breadcrumbs={breadcrumbs}
    lang={lang}
    showContentTitle={false}
    hideSidebar={true}
  >
      <div class="container mx-auto px-4 py-8">
        <EmptyState 
          title={t.news.empty_state.no_news_title}
          description={t.news.empty_state.no_news_description}
          icon="news"
          lang={lang}
          actions={[{
            label: t.news.empty_state.back_to_news_list,
            href: `/${lang}/news`,
            variant: 'secondary'
          }]}
        />
      </div>
  </SecondaryPageLayout>
  ) : (
  <SecondaryPageLayout
    breadcrumbs={breadcrumbs}
    lang={lang}
    showContentTitle={false}
    hideSidebar={true}
  >
    <!-- Pagefind 图片元数据 -->
    <div
      data-pagefind-meta="image"
      data-pagefind-meta-image={getFirstImage(news.image)?.url}
      style="display: none;"
    >
    </div>
    <!-- Main Content Section -->
    <div class="container mx-auto px-4 py-8">
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        <!-- 中间主内容区 -->
        <div class="lg:col-span-3">
          <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
            <article>
              <!-- Article Header -->
              <header class="mb-8">
                <h1
                  class="text-3xl md:text-4xl font-bold text-gray-900 mb-4 leading-tight"
                >
                  {newsItem.title}
                </h1>
                <time
                  datetime={formatDate(newsItem.publishedAt)}
                  class="text-sm text-gray-500 block"
                  >{formatDate(newsItem.publishedAt)}</time
                >
              </header>
              <!-- Article Content -->
              <div class="prose max-w-none" set:html={newsItem.news_detail} />
            </article>
          </div>

          <!-- Previous/Next 导航 -->
          <PageNavigation previous={previousNews} next={nextNews} lang={lang} mode="news" />

          <!-- Related Products -->
          <div class="bg-white rounded-lg p-8 shadow-sm mb-8">
            <h2 class="text-xl font-bold text-gray-900 mb-6 flex items-center">
              <div class="w-1 h-6 bg-red-600 mr-3"></div>
              {t.related.products}
            </h2>
            <GridList
              items={relatedProducts.map((p: any) => ({
                id: p.id,
                title: p.title, // 使用 name 字段作为 title
                image: p.image,
                excerpt: p.excerpt,
                href: `/${lang}/products/${p.url_slug}`,
              }))}
              itemsPerRow={3}
              translations={{ common: t.common }}
              lang={lang}
            />
          </div>

          <!-- Related News -->
          <RelatedNews relatedNews={relatedNews} lang={lang} />
        </div>

        <!-- 右侧热门文章 -->
        <PopularArticles popularArticles={popularArticles} lang={lang} />
      </div>
    </div>
  </SecondaryPageLayout>
)}
</>
<style is:global>
  .prose {
    @apply text-gray-800 leading-relaxed;
  }
  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4,
  .prose h5,
  .prose h6 {
    @apply text-gray-900 font-bold;
  }
  .prose a {
    @apply text-blue-600 hover:underline;
  }
  .prose p {
    @apply my-4;
  }
  .prose ul,
  .prose ol {
    @apply my-4 pl-6;
  }
  .prose li {
    @apply mb-2;
  }
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
