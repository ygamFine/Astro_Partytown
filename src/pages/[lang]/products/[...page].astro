---
export const prerender = true;

import SecondaryPageLayout from '@components/templates/layout/SecondaryPageLayout.astro';
import EnhancedGridList from '@components/templates/common/EnhancedGridList.astro';
import ViewToggle from '@components/templates/common/ViewToggle.astro';
import Pagination from '@components/templates/common/Pagination.astro';
import EmptyState from '@components/templates/common/EmptyState.astro';
import { getProducts } from '@apis/common.js';
import { SUPPORTED_LANGUAGES } from '@utils/i18n-routes'
import { getDictionary } from '@i18n/dictionaries.js';
import { buildUrl } from '@utils/envConfig.js';

// 只为配置中启用的语言和页面生成路由
export async function getStaticPaths() {

  const paths: any[] = [];
  const itemsPerPage = 9;
  
  // 为每种语言获取产品数据来计算总页数
  for (const lang of SUPPORTED_LANGUAGES) {
    const products = await getProducts(lang);
    const totalPages = Math.ceil(products.length / itemsPerPage);
    console.log('lang', lang);
    if (products.length > 0) {
      // 第一页 (无页码)
      paths.push({
        params: { lang, page: undefined },
        props: { locale: lang, currentPage: 1, totalPages }
      });
      
      // 其他页面
      for (let page = 2; page <= totalPages; page++) {
        paths.push({
          params: { lang, page: page.toString() },
          props: { locale: lang, currentPage: page, totalPages }
        });
      }
    } else {
      // 无数据也生成第一页，避免 404，页面内展示空状态
      paths.push({
        params: { lang, page: undefined },
        props: { locale: lang, currentPage: 1, totalPages: 0 }
      });
    }
  }
  
  return paths;
}

const { lang, page } = Astro.params;
const { currentPage, totalPages } = Astro.props;
const t = await getDictionary(lang);

// 获取产品数据
const products = await getProducts(lang);

// 检查是否有数据
const hasProducts = products && products.length > 0;

// 分页配置
const itemsPerPage = 9;
const startIndex = hasProducts ? (currentPage - 1) * itemsPerPage : 0;
const endIndex = hasProducts ? startIndex + itemsPerPage : 0;
const displayProducts = hasProducts ? products.slice(startIndex, endIndex) : [];

// 转换产品数据格式以适配GridList组件
const gridItems = hasProducts ? displayProducts : [];
// 面包屑导航
const breadcrumbs = [
  { label: 'Home', href: buildUrl(lang, '/') },
  { label: 'Products', href: buildUrl(lang, '/products') }
];

// 生成分页基础URL
const baseUrl = buildUrl(lang, '/products');
---

<SecondaryPageLayout 
  title="Products"
  description=""
  breadcrumbs={breadcrumbs}
  currentSection="products"
  contentType="grid"
  lang={lang}
>
  {hasProducts ? (
    <>
      <!-- 视图切换控件 -->
      <ViewToggle 
        currentView="grid"
        translations={t.common}
        lang={lang}
        totalItems={displayProducts.length}
        showTotal={true}
      />
      
      <!-- 产品列表 -->
      <EnhancedGridList 
        items={gridItems}
        itemsPerRow={3}
        maxRows={3}
        mode="product"
        translations={t.common}
        lang={lang}
        viewMode="grid"
      />
      
      <!-- 分页 -->
      <Pagination 
        currentPage={currentPage}
        totalPages={totalPages}
        baseUrl={baseUrl}
        i18n={t.common}
      />
    </>
  ) : (
    <EmptyState 
      title="暂无产品数据"
      description="当前语言暂无产品信息，请稍后再试或切换其他语言。"
      icon="product"
      lang={lang}
    />
  )}
</SecondaryPageLayout> 