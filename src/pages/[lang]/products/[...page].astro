---
export const prerender = true;

import SecondaryPageLayout from '../../../components/templates/layout/SecondaryPageLayout.astro';
import GridList from '../../../components/templates/common/GridList.astro';
import Pagination from '../../../components/templates/common/Pagination.astro';
import { getProducts } from '../../../lib/strapi.js';
import { getEnabledLanguages } from '../../../lib/i18n-config.js';
import { mergeTranslations } from '../../../locales/i18n.js';
import { generateImageHash } from '../../../utils/hashUtils.js';

// 只为配置中启用的语言和页面生成路由
export async function getStaticPaths() {
  const paths: any[] = [];
  const itemsPerPage = 9;
  const enabledLanguages = getEnabledLanguages();
  
  // 为每种语言获取产品数据来计算总页数
  for (const lang of enabledLanguages) {
    const products = await getProducts(lang);
    const totalPages = Math.ceil(products.length / itemsPerPage);
    
    // 只有当有产品数据时才生成页面
    if (totalPages > 0) {
      // 第一页 (无页码)
      paths.push({
        params: { lang, page: undefined },
        props: { locale: lang, currentPage: 1, totalPages }
      });
      
      // 其他页面
      for (let page = 2; page <= totalPages; page++) {
        paths.push({
          params: { lang, page: page.toString() },
          props: { locale: lang, currentPage: page, totalPages }
        });
      }
    }
  }
  
  return paths;
}

const { lang, page } = Astro.params;
const { currentPage, totalPages } = Astro.props;
const translations = await mergeTranslations(lang, ['pagination', 'common']);
const t = (translations as any).pagination || {};

// 获取产品数据
const products = await getProducts(lang);

// 检查是否有数据
const hasProducts = products && products.length > 0;

// 分页配置
const itemsPerPage = 9;
const startIndex = hasProducts ? (currentPage - 1) * itemsPerPage : 0;
const endIndex = hasProducts ? startIndex + itemsPerPage : 0;
const displayProducts = hasProducts ? products.slice(startIndex, endIndex) : [];

// 加载图片映射
let imageMapping: any = {};
try {
  const fs = await import('fs/promises');
  const path = await import('path');
  const mappingPath = path.join(process.cwd(), 'src/data/strapi-image-mapping.json');
  const mappingData = await fs.readFile(mappingPath, 'utf8');
  imageMapping = JSON.parse(mappingData);
} catch (error: any) {
  console.warn('无法加载图片映射文件:', error.message);
}

// 处理产品图片，确保是本地路径
const processProductImage = (imageData: any): string => {
  if (!imageData) return '/images/placeholder.webp';
  
  if (Array.isArray(imageData)) {
    // 如果是数组，找到第一个有效的图片
    const processedImages = imageData
      .map(img => {
        if (typeof img === 'string') {
          // 如果是字符串URL，尝试在缓存中找到对应的本地文件
          if (img.startsWith('http')) {
            const urlHash = generateImageHash(img);
            const cachedImage = imageMapping.strapiImages?.find((cached: any) => 
              cached.includes(urlHash) || cached.includes(img.split('/').pop())
            );
            return cachedImage || img;
          }
          return img;
        } else if (img && typeof img === 'object' && img.url) {
          // 如果是图片对象，提取URL并映射到本地缓存
          const originalUrl = img.url;
          if (originalUrl.startsWith('/uploads/')) {
            // 这是Strapi的本地图片，尝试在缓存中找到对应的文件
            const fileName = originalUrl.split('/').pop();
            
            // 尝试多种匹配方式
            const cachedImage = imageMapping.strapiImages?.find((cached: any) => {
              // 1. 直接匹配文件名
              if (cached.includes(fileName)) return true;
              
              // 2. 匹配hash
              if (img.hash && cached.includes(img.hash)) return true;
              
              // 3. Base64编码匹配
              try {
                const encodedName = Buffer.from(fileName).toString('base64');
                if (cached.includes(encodedName)) return true;
                // 处理Base64填充字符
                const encodedNameNoPadding = encodedName.replace(/=+$/, '');
                if (cached.includes(encodedNameNoPadding)) return true;
              } catch (e) {}
              
              // 4. Base64解码匹配
              try {
                const decodedName = Buffer.from(fileName, 'base64').toString();
                if (cached.includes(decodedName)) return true;
              } catch (e) {}
              
              return false;
            });
            
            return cachedImage || originalUrl;
          }
          return originalUrl;
        }
        return null;
      })
      .filter(img => img && img !== '/images/placeholder.webp');
    
    return processedImages.length > 0 ? processedImages[0] : '/images/placeholder.webp';
  }
  
  if (typeof imageData === 'string') {
    // 如果是外部URL，尝试在缓存中找到对应的本地文件
    if (imageData.startsWith('http')) {
      const urlHash = generateImageHash(imageData);
      const cachedImage = imageMapping.strapiImages?.find((cached: any) => 
        cached.includes(urlHash) || cached.includes(imageData.split('/').pop())
      );
      return cachedImage || '/images/placeholder.webp';
    }
    // 如果是本地路径且格式正确，返回原路径
    if (imageData.match(/\.(jpe?g|png|webp|gif|svg|avif|tiff?)$/i)) {
      return imageData;
    }
  }
  
  return '/images/placeholder.webp';
};

// 转换产品数据格式以适配GridList组件
const gridItems = hasProducts ? displayProducts
  .map((product: any) => {
    const validImage = processProductImage(product.image);
    
    return {
      id: product.id,
      title: product.name,
      image: validImage,
      excerpt: product.excerpt,
      category: product.category,
      href: `/${lang}/products/${product.slug || product.id}`
    };
  }) : [];



// 面包屑导航
const breadcrumbs = [
  { label: 'Home', href: `/${lang}` },
  { label: 'Products', href: `/${lang}/products` }
];

// 生成分页基础URL
const baseUrl = `/${lang}/products`;
---

<SecondaryPageLayout 
  title="Products"
  description="Explore our comprehensive range of construction machinery"
  breadcrumbs={breadcrumbs}
  currentSection="products"
  contentType="grid"
  lang={lang}
>
  {hasProducts ? (
    <>
      <!-- 产品网格 -->
      <GridList 
        items={gridItems}
        itemsPerRow={3}
        maxRows={3}
        translations={translations}
        lang={lang}
      />
      
      <!-- 分页 -->
      <Pagination 
        currentPage={currentPage}
        totalPages={totalPages}
        baseUrl={baseUrl}
        i18n={t}
      />
    </>
  ) : (
    <!-- 空状态 -->
    <div class="empty-state">
      <div class="empty-state-content">
        <div class="empty-state-icon">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
            <path d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M12 12l8-4" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M12 12v10" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M12 12L4 8" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>
        <h3 class="empty-state-title">暂无产品数据</h3>
        <p class="empty-state-description">当前语言暂无产品信息，请稍后再试或切换其他语言。</p>
        <div class="empty-state-actions">
          <button class="empty-state-button secondary" onclick={`window.location.href='/${lang}'`}>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
              <polyline points="9,22 9,12 15,12 15,22"/>
            </svg>
            返回首页
          </button>
        </div>
      </div>
    </div>
  )}
</SecondaryPageLayout> 