---
import { Image } from 'astro:assets';
import SecondaryPageLayout from '@components/templates/layout/SecondaryPageLayout.astro';
import ContactButtons from '@components/common/contact/ContactButtons.astro';
import RelatedNews from '@components/templates/common/RelatedNews.astro';
import PageNavigation from '@components/templates/common/PageNavigation.astro';
import RelatedProducts from '@components/templates/common/RelatedProducts.astro';
import PopularProductsSidebar from '@components/templates/common/PopularProductsSidebar.astro';
import EmptyState from '@components/templates/common/EmptyState.astro';
import { getByCenterData, getCompaniesSite, getItalkinForm } from '@apis/common';
import { extractUrl, getFirstImage, generateUrl } from '@utils/tools';
import { getDictionary } from '@i18n/dictionaries';
import { generateCategoryBreadcrumbs } from '@utils/breadcrumbUtils';
import { themeConfig } from '@config/theme';
import RichText from '@components/common/layout/RichText.astro';
import ItalkinForm from '@components/common/italkin/InquiryForm';
import StaticPaths, { type PageProps, type Category, type Pages } from '@utils/StaticPaths';

export async function getStaticPaths() {  
  return await new StaticPaths().detailStaticPaths('product');
}

const { lang, category, pages } = Astro.props as PageProps;
const { path = '', name = '' } = category as Category;
const { items, item } = pages as Pages;


// 如果产品不存在，返回404
if (!item) {
  return Astro.redirect('/404');
}
// 检查是否有产品数据
const hasProduct = item !== null;

// 加载国际化翻译
const t = await getDictionary(lang);

// 获取相关产品（随机选择3个其他产品）
const otherProducts = items && Array.isArray(items) ? items.filter((p: any) => p.url_slug !== item.url_slug) : [];
const shuffled = otherProducts.sort(() => 0.5 - Math.random());
const relatedProducts = shuffled.slice(0, 3);


// 获取相关新闻（最新的4篇）
const allNews = await getByCenterData(lang, 'news');

const relatedNews = allNews.slice(0, 4);

// 获取当前产品在列表中的位置，用于上一个/下一个导航
const currentIndex = items?.findIndex((p: any) => p.id === item.id) || -1;
const previousProduct = currentIndex > 0 ? items?.[currentIndex - 1] : null;

const nextProduct = currentIndex < (items?.length || 0) - 1 ? items?.[currentIndex + 1] : null;

// 推荐产品（不同类别的产品）
const recommendedProducts = items?.filter((p: any) => p?.product_category?.id != item?.product_category?.id).slice(0, 3);

// 推荐产品：生成可展示的首图
const popularProducts = recommendedProducts?.map((p: any) => ({
  ...p,
  displayImage: extractUrl(p, true)
}));

const breadcrumbs = await generateCategoryBreadcrumbs(lang, 'products', [{ path, name }, { path: item.url_slug, name: item.title }]) || [];

// 获取公司信息
const companiesResp = await getCompaniesSite(lang);
const companyId = companiesResp?.company?.hz_company_id ?? "";
// 获取网站信息
const siteId = companiesResp?.website?.hz_website_id ?? "";
// 获取表单信息
const formResp = await getItalkinForm(companyId, siteId);
// 获取表单结构
const formStructure = formResp?.data?.formStructure || [];
// 获取表单翻译
const formTrans = formResp?.data?.formTrans || [];
---
<>
{ !hasProduct ? (
  <SecondaryPageLayout
    breadcrumbs={breadcrumbs}
    lang={lang}
    showContentTitle={false}
    hideSidebar={true}
  >
    <div class="container mx-auto px-4 py-8">
      <EmptyState 
        title={t.product.empty_state.no_products_title}
        description={t.product.empty_state.no_products_description}
        icon="news"
        lang={lang}
        actions={[{
          label: t.product.empty_state.back_to_products_list,
          href: generateUrl(lang, '/products'),
          variant: 'secondary'
        }]}
      />
    </div>
  </SecondaryPageLayout>
) : (
  <SecondaryPageLayout
    breadcrumbs={breadcrumbs}
    lang={lang}
    showContentTitle={false}
    hideSidebar={true}
  >
  <!-- Pagefind 图片元数据 -->
  <div data-pagefind-meta="image"  data-pagefind-meta-image={getFirstImage(item.image)?.url} style="display: none;"></div>
  <!-- <div data-pagefind-meta="image" style="display: none;"></div>   -->
  <!-- 第一行：产品主要信息 -->
    <section class="bg-white py-8">
      <div class="container mx-auto px-4">
        <div class="grid grid-cols-1 lg:grid-cols-5 gap-12 lg:items-start">
          <!-- 左侧：产品图片展示区 -->
          <div class="lg:col-span-2 flex flex-col h-full">
            <!-- 主图片区域 -->
            <div class="flex-1 relative">
              <!-- 主图片滑动容器 -->
              <div class="bg-gray-100 rounded-lg overflow-hidden relative" id="imageContainer" style="width: 100%; height: 400px;">
                <div 
                  id="imageSlider" 
                  class="flex transition-transform duration-500 ease-in-out h-full"
                  style="width: 100%;"
                >
                  {/* 所有图片 */}
                  {item.image && Array.isArray(item.image) && item.image.length > 0 && item.image.map((img: any, index: any) => (
                    <Image 
                      src={img.url || '/images/placeholder.webp'} 
                      alt={`${img.name} ${index + 1}`}
                      width={800}
                      height={400}
                      class="object-contain cursor-crosshair select-none flex-shrink-0"
                      style="width: 100%; height: 100%; user-select: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none;"
                      draggable="false"
                      data-index={index}
                    />
                  ))}
                </div>
                <!-- 透明放大镜选择框 -->
                <div id="magnifierLens" class="absolute border-2 border-red-500 pointer-events-none opacity-0 transition-opacity duration-200 z-10 rounded-full" style="width: 100px; height: 100px; background: rgba(255,255,255,0.2); box-shadow: 0 0 10px rgba(0,0,0,0.3);"></div>
              </div>
              <!-- 放大显示区域 -->
              <div id="magnifierZoom" class="absolute top-0 bg-white border border-gray-300 rounded-lg shadow-xl pointer-events-none opacity-0 transition-opacity duration-200 z-50 overflow-hidden hidden lg:block" style="left: calc(100% + 20px); width: 400px; height: 400px; background-repeat: no-repeat; background-size: 400% 400%; background-position: 0 0;"></div>
            </div>
            
            <!-- 缩略图区域 -->
            <div class="relative mt-4 flex items-center">
              <!-- 左切换按钮 -->
              <button 
                id="thumbnailPrev"
                class="flex-shrink-0 bg-gray-300 hover:bg-gray-400 text-gray-700 rounded-sm shadow-md flex items-center justify-center mr-2 transition-colors z-20 h-20"
                style="display: flex !important; visibility: visible !important; width: 15px;"
              >
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
              </button>

              <!-- 缩略图容器 -->
              <div 
                id="thumbnailContainer"
                class="flex space-x-2 overflow-x-hidden flex-1 scroll-smooth"
                style="scroll-behavior: smooth;"
              >
                {item.image && Array.isArray(item.image) && item.image.length > 0 && item.image.map((img: any, index: number) => (
                  <Image 
                    src={img.url || '/images/placeholder.webp'} 
                    alt={`${img.name} ${index + 1}`}
                    width={80}
                    height={80}
                    class={`w-20 h-20 object-cover rounded cursor-pointer flex-shrink-0 thumbnail-img select-none ${index === 0 ? 'border-2 border-red-600' : 'border border-gray-200 hover:border-red-600'}`}
                    data-index={index}
                    data-src={img.url}
                    draggable="false"
                    style="user-select: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none;"
                  />
                ))}
              </div>

              <!-- 右切换按钮 -->
              <button 
                id="thumbnailNext"
                class="flex-shrink-0 bg-gray-300 hover:bg-gray-400 text-gray-700 rounded-sm shadow-md flex items-center justify-center ml-2 transition-colors z-20 h-20"
                style="display: flex !important; visibility: visible !important; width: 15px;"
              >
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                </svg>
              </button>
            </div>
          </div>

          <!-- 右侧：产品信息区 -->
          <div class="lg:col-span-3 flex flex-col space-y-6">
            <!-- 产品名称 -->
            <h1 class="text-3xl font-bold text-gray-900">{item.title}</h1>

            <!-- 产品描述 -->
            <div class="bg-gray-50 rounded-lg p-6">
              <div class="space-y-4">
                <div class="pt-4 border-gray-200">
              <h4 class="font-medium text-gray-900 mb-2">{t.product.advantages}</h4>
                  <div class="text-sm text-gray-600 space-y-1" set:html={item.product_advantage}></div>
                </div>
              </div>
            </div>

            <!-- 价格和购物车区域 -->
            {themeConfig.layout.productDetail.pricing.showPricing && 
            !themeConfig.restrictions.languageRestrictions[lang as keyof typeof themeConfig.restrictions.languageRestrictions]?.hidePricing && (
              <div class="bg-gray-50 rounded-lg p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">{t.product.price || "Product Price"}</h3>
                
                {/* 多币种价格展示 */}
                {themeConfig.layout.productDetail.pricing.showMultiplePrices && (
                  <div class="grid grid-cols-5 gap-2 mb-4">
                    {Object.entries(themeConfig.layout.productDetail.pricing.priceConfig.currencies).map(([currency, config]) => (
                      <div class="p-2 bg-white rounded border text-center">
                        <div class="text-xs text-gray-600 mb-1">{currency}</div>
                        <span class="text-lg font-bold text-red-600">{config.symbol}1,299</span>
                      </div>
                    ))}
                  </div>
                )}
                

                
                <!-- 加入购物车按钮 -->
                {themeConfig.layout.productDetail.pricing.showAddToCart && 
                !themeConfig.restrictions.languageRestrictions[lang as keyof typeof themeConfig.restrictions.languageRestrictions]?.hideAddToCart && (
                  <div class="flex justify-start">
                    <button 
                      class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-300 flex items-center gap-2"
                      onclick="addToCart()"
                    >
                      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"/>
                      </svg>
                      {t.product.add_to_cart || "Add to Cart"}
                    </button>
                  </div>
                )}
              </div>
            )}

            <!-- 联系方式按钮 -->
            <div class="bg-gray-50 rounded-lg p-4">
              <h3 class="text-lg font-semibold text-gray-900 mb-4 text-center">{t.product.contact_us}</h3>
              <ContactButtons 
                t={t.product.button}
                showContactNow={themeConfig.layout.contactButtons.showContactNow}
                showDownloadPdf={themeConfig.layout.contactButtons.showDownloadPdf}
                showEmail={themeConfig.layout.contactButtons.showEmail}
                showTelephone={themeConfig.layout.contactButtons.showTelephone}
                showWhatsapp={themeConfig.layout.contactButtons.showWhatsapp}
              />
            </div>
            
            <!-- 分享功能 -->
            <div class="flex items-center space-x-4 pt-4 border-t">
              <span class="text-sm text-gray-500">{t.product.share_to}</span>
              <div class="flex space-x-2">
                <button class="w-8 h-8 bg-blue-600 text-white rounded flex items-center justify-center hover:bg-blue-700">
                  <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24"><path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"/></svg>
                </button>
                <button class="w-8 h-8 bg-green-600 text-white rounded flex items-center justify-center hover:bg-green-700">
                  <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24"><path d="M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.481 5.236 3.48 8.414-.003 6.557-5.338 11.892-11.893 11.892-1.99-.001-3.951-.5-5.688-1.448l-6.305 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.884-.001 2.225.651 3.891 1.746 5.634l-.999 3.648 3.742-.981zm11.387-5.464c-.074-.124-.272-.198-.57-.347-.297-.149-1.758-.868-2.031-.967-.272-.099-.47-.149-.669.149-.198.297-.768.967-.941 1.165-.173.198-.347.223-.644.074-.297-.149-1.255-.462-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.297-.347.446-.521.151-.172.2-.296.3-.495.099-.198.05-.372-.025-.521-.075-.148-.669-1.611-.916-2.206-.242-.579-.487-.501-.669-.51l-.57-.01c-.198 0-.52.074-.792.372s-1.04 1.016-1.04 2.479 1.065 2.876 1.213 3.074c.149.198 2.095 3.2 5.076 4.487.709.306 1.263.489 1.694.626.712.226 1.36.194 1.872.118.571-.085 1.758-.719 2.006-1.413.248-.695.248-1.29.173-1.414z"/></svg>
                </button>
                <button class="w-8 h-8 bg-gray-600 text-white rounded flex items-center justify-center hover:bg-gray-700">
                  <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24"><path d="M19 7.001c0 3.865-3.134 7-7 7s-7-3.135-7-7c0-3.867 3.134-7.001 7-7.001s7 3.134 7 7.001zm-1.598 7.18c-1.506 1.137-3.374 1.82-5.402 1.82-2.03 0-3.899-.685-5.407-1.822-4.072 1.793-6.593 7.376-6.593 9.821h24c0-2.423-2.6-8.006-6.598-9.819z"/></svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- 第二行：详细内容 -->
    <section class="py-8">
      <div class="container mx-auto px-4">
        <div class={`grid grid-cols-1 gap-8 ${themeConfig.layout.productDetail.sidebar.showSidebar ? 'lg:grid-cols-4' : 'lg:grid-cols-1'}`}>
          <!-- 左侧：详细内容 -->
          <div class={`space-y-8 ${themeConfig.layout.productDetail.sidebar.showSidebar ? 'lg:col-span-3' : 'lg:col-span-1'}`}>
            <!-- 产品详情 -->
            <div class="bg-white rounded-lg p-8 shadow-sm">
              <h2 class="text-2xl font-bold text-gray-900 mb-6">{t.product.details}</h2>
              <!-- 富文本内容 -->
              {item.details && (
                <RichText lang={lang} content={item.details} />
              )}
            </div>

            <!-- Previous / Next 导航 -->
          <PageNavigation previous={previousProduct} next={nextProduct} lang={lang} mode="products" />

            <!-- Leave your messages 表单 -->
            <div class="bg-white rounded-lg p-8 shadow-sm">
              <ItalkinForm 
                client:visible
                id="product-detail-form"
                lang={lang}
                transitions={t}
                showTitle={true}
                showDescription={true}
                successMode="toast"
                companyId={companyId}
                formId={formResp?.data?.formStructure?.[0]?.formId}
                formStructure={formStructure}
                formTrans={formTrans}
              />
            </div>

            <!-- Related Products -->
            <RelatedProducts relatedProducts={relatedProducts} lang={lang} />

            <!-- Related News -->
            <RelatedNews 
              relatedNews={relatedNews}
              lang={lang}
            />
          </div>

          {/* 右侧：热门产品 */}
          {themeConfig.layout.productDetail.sidebar.showSidebar && (
            <PopularProductsSidebar popularProducts={popularProducts} lang={lang} />
          )}
        </div>
      </div>
    </section>
  </SecondaryPageLayout>
)}
</>
  <script is:inline define:vars={{ 
    formMessages: {
      sending: t?.form?.messages?.sending || "Sending...",
      sendSuccess: t?.form?.messages?.submit_success_toast_text || "Success!",
      addedToCart: t?.product?.added_to_cart || "Added to Cart"
    }
  }}>
    // 图片画廊和放大镜功能
    document.addEventListener('DOMContentLoaded', () => {
      
      const container = document.getElementById('imageContainer');
        const slider = document.getElementById('imageSlider');
      const thumbnails = document.querySelectorAll('.thumbnail-img');
      const prevBtn = document.getElementById('thumbnailPrev');
      const nextBtn = document.getElementById('thumbnailNext');
      const lens = document.getElementById('magnifierLens');
      const zoom = document.getElementById('magnifierZoom');
      

      if (!container || !slider) {
        console.log('关键元素未找到，退出');
        return;
      }
      
      const images = Array.from(slider.querySelectorAll('img'));
      let currentIndex = 0;
      
      // 初始化图片容器宽度
      if (images.length > 0) {
        slider.style.width = `${images.length * 100}%`;
        images.forEach(img => {
          img.style.width = `${100 / images.length}%`;
        });
      }
      
      // 图片切换
      function goToImage(index) {
        if (index < 0 || index >= images.length) return;
        currentIndex = index;
        console.log('切换到图片:', index);
        updateDisplay();
      }
      
      function updateDisplay() {
        if (!slider) return;
        
        const translateX = -(currentIndex * (100 / images.length));
        slider.style.transform = `translateX(${translateX}%)`;
        console.log('更新显示，translateX:', translateX);
        
        thumbnails.forEach((thumb, i) => {
          thumb.classList.toggle('border-red-600', i === currentIndex);
          thumb.classList.toggle('border-2', i === currentIndex);
          thumb.classList.toggle('border-gray-200', i !== currentIndex);
        });
        
        // 自动滚动缩略图到当前选中的图片
        scrollToCurrentThumbnail();
        
        updateMagnifier();
      }
      
      // 滚动缩略图到当前选中的图片
      function scrollToCurrentThumbnail() {
        const thumbnailContainer = document.getElementById('thumbnailContainer');
        const currentThumbnail = thumbnails[currentIndex];
        
        if (!thumbnailContainer || !currentThumbnail) return;
        
        const containerRect = thumbnailContainer.getBoundingClientRect();
        const thumbnailRect = currentThumbnail.getBoundingClientRect();
        
        // 检查缩略图是否在可视区域内
        const isVisible = thumbnailRect.left >= containerRect.left && 
                         thumbnailRect.right <= containerRect.right;
        
        if (!isVisible) {
          // 计算需要滚动的距离
          const scrollLeft = currentThumbnail.offsetLeft - 
                           (thumbnailContainer.offsetWidth / 2) + 
                           (currentThumbnail.offsetWidth / 2);
          
          thumbnailContainer.scrollTo({
            left: Math.max(0, scrollLeft),
            behavior: 'smooth'
          });
        }
      }
      
      // 放大镜功能
      function updateMagnifier() {
        if (!zoom || !images[currentIndex]) return;
        const currentImage = images[currentIndex];
        console.log('更新放大镜，图片:', currentImage.src);
        
        // 获取图片的实际URL
        const imageSrc = currentImage.src || currentImage.getAttribute('src');
        
        if (currentImage.complete && imageSrc) {
          zoom.style.backgroundImage = `url('${imageSrc}')`;
          // 设置初始背景尺寸（保持宽高比）
          setCorrectBackgroundSize(currentImage);
        } else if (imageSrc) {
          currentImage.addEventListener('load', () => {
            zoom.style.backgroundImage = `url('${imageSrc}')`;
            // 设置初始背景尺寸（保持宽高比）
            setCorrectBackgroundSize(currentImage);
          }, { once: true });
        }
      }
      
      // 设置正确的背景尺寸（保持宽高比）
      function setCorrectBackgroundSize(image) {
        const imageRect = image.getBoundingClientRect();
        const naturalWidth = image.naturalWidth;
        const naturalHeight = image.naturalHeight;
        
        // 计算图片的显示宽高比
        const displayAspectRatio = imageRect.width / imageRect.height;
        const naturalAspectRatio = naturalWidth / naturalHeight;
        
        // 计算实际显示的图片尺寸（考虑object-contain的效果）
        let actualImageWidth, actualImageHeight;
        if (displayAspectRatio > naturalAspectRatio) {
          // 图片高度填满容器，宽度居中
          actualImageHeight = imageRect.height;
          actualImageWidth = imageRect.height * naturalAspectRatio;
          } else {
          // 图片宽度填满容器，高度居中
          actualImageWidth = imageRect.width;
          actualImageHeight = imageRect.width / naturalAspectRatio;
        }
        
        // 计算放大倍数（基于实际图片尺寸）
        const zoomScale = Math.max(2, Math.min(4, 400 / Math.min(actualImageWidth, actualImageHeight)));
        
        // 设置背景尺寸（保持宽高比）
        zoom.style.backgroundSize = `${actualImageWidth * zoomScale}px ${actualImageHeight * zoomScale}px`;
      }
      
      function setupMagnifier() {
        if (!lens || !zoom) {
          console.log('放大镜元素未找到');
          return;
        }
        
        if (window.innerWidth < 1024) {
          console.log('非桌面端，禁用放大镜');
          return;
        }
        
        console.log('设置放大镜');
        
        container.addEventListener('mouseenter', () => {
          console.log('鼠标进入');
          lens.style.opacity = '1';
          zoom.style.opacity = '1';
          updateMagnifier();
        });
        
        container.addEventListener('mouseleave', () => {
          console.log('鼠标离开');
          lens.style.opacity = '0';
          zoom.style.opacity = '0';
        });
        
        container.addEventListener('mousemove', (e) => {
          const rect = container.getBoundingClientRect();
          const currentImage = images[currentIndex];
          
          if (!currentImage) return;
          
          // 获取当前图片的实际显示尺寸和位置
          const imageRect = currentImage.getBoundingClientRect();
          const containerRect = container.getBoundingClientRect();
          
          // 计算图片在容器中的相对位置
          const imageOffsetX = imageRect.left - containerRect.left;
          const imageOffsetY = imageRect.top - containerRect.top;
          
          // 鼠标相对于容器的位置
          const mouseX = e.clientX - containerRect.left;
          const mouseY = e.clientY - containerRect.top;
          
          // 鼠标相对于图片的位置
          const relativeX = mouseX - imageOffsetX;
          const relativeY = mouseY - imageOffsetY;
          
          // 检查鼠标是否在图片区域内
          if (relativeX >= 0 && relativeX <= imageRect.width && 
              relativeY >= 0 && relativeY <= imageRect.height) {
            
            // 计算放大镜位置（相对于容器）
            const lensX = Math.max(0, Math.min(mouseX - 50, rect.width - 100));
            const lensY = Math.max(0, Math.min(mouseY - 50, rect.height - 100));
            
            lens.style.left = lensX + 'px';
            lens.style.top = lensY + 'px';
            
            // 获取图片的原始尺寸
            const naturalWidth = currentImage.naturalWidth;
            const naturalHeight = currentImage.naturalHeight;
            
            // 计算图片的显示宽高比
            const displayAspectRatio = imageRect.width / imageRect.height;
            const naturalAspectRatio = naturalWidth / naturalHeight;
            
            // 计算实际显示的图片尺寸（考虑object-contain的效果）
            let actualImageWidth, actualImageHeight;
            if (displayAspectRatio > naturalAspectRatio) {
              // 图片高度填满容器，宽度居中
              actualImageHeight = imageRect.height;
              actualImageWidth = imageRect.height * naturalAspectRatio;
            } else {
              // 图片宽度填满容器，高度居中
              actualImageWidth = imageRect.width;
              actualImageHeight = imageRect.width / naturalAspectRatio;
            }
            
            // 计算图片在容器中的实际偏移
            const actualOffsetX = (imageRect.width - actualImageWidth) / 2;
            const actualOffsetY = (imageRect.height - actualImageHeight) / 2;
            
            // 重新计算鼠标相对于实际图片的位置
            const actualRelativeX = relativeX - actualOffsetX;
            const actualRelativeY = relativeY - actualOffsetY;
            
            // 检查鼠标是否在实际图片区域内
            if (actualRelativeX >= 0 && actualRelativeX <= actualImageWidth && 
                actualRelativeY >= 0 && actualRelativeY <= actualImageHeight) {
              
              // 计算放大倍数（基于实际图片尺寸）
              const zoomScale = Math.max(2, Math.min(4, 400 / Math.min(actualImageWidth, actualImageHeight)));
              
              // 计算背景位置（基于实际图片位置）
              const bgX = -(actualRelativeX * zoomScale - 200);
              const bgY = -(actualRelativeY * zoomScale - 200);
              
              zoom.style.backgroundPosition = `${bgX}px ${bgY}px`;
              zoom.style.backgroundSize = `${actualImageWidth * zoomScale}px ${actualImageHeight * zoomScale}px`;
            }
          }
        });
      }
      
      // 事件绑定
      thumbnails.forEach((thumb, index) => {
        thumb.addEventListener('click', () => {
          console.log('缩略图点击:', index);
          goToImage(index);
        });
      });
      
      // 缩略图滚动功能
      function scrollThumbnails(direction) {
        const thumbnailContainer = document.getElementById('thumbnailContainer');
        if (!thumbnailContainer) return;
        
        const scrollAmount = 100; // 每次滚动的像素数
        const currentScroll = thumbnailContainer.scrollLeft;
        const newScroll = direction === 'left' 
          ? Math.max(0, currentScroll - scrollAmount)
          : currentScroll + scrollAmount;
        
        thumbnailContainer.scrollTo({
          left: newScroll,
          behavior: 'smooth'
        });
      }
      
      prevBtn?.addEventListener('click', () => {
        console.log('上一张');
        goToImage(currentIndex - 1);
      });
      
      nextBtn?.addEventListener('click', () => {
        console.log('下一张');
        goToImage(currentIndex + 1);
      });
      
      // 缩略图左右滚动按钮
      const thumbnailPrevBtn = document.getElementById('thumbnailPrev');
      const thumbnailNextBtn = document.getElementById('thumbnailNext');
      
      thumbnailPrevBtn?.addEventListener('click', (e) => {
        e.preventDefault();
        scrollThumbnails('left');
      });
      
      thumbnailNextBtn?.addEventListener('click', (e) => {
        e.preventDefault();
        scrollThumbnails('right');
      });
      
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') goToImage(currentIndex - 1);
        if (e.key === 'ArrowRight') goToImage(currentIndex + 1);
      });
      
      // 滑动功能
      let startX = 0, startTime = 0;
      
      container.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startTime = Date.now();
      }, { passive: true });

      container.addEventListener('touchend', (e) => {
        const deltaX = e.changedTouches[0].clientX - startX;
        const timeDiff = Date.now() - startTime;
        if (timeDiff < 500 && Math.abs(deltaX) > 50) {
          deltaX > 0 ? goToImage(currentIndex - 1) : goToImage(currentIndex + 1);
        }
      }, { passive: true });

      
      // 购物车按钮
      window.addToCart = () => {
        const button = event?.target;
        if (button && button.style) {
        const originalText = button.innerHTML;
        button.innerHTML = '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>' + formMessages.addedToCart;
        button.style.backgroundColor = '#10b981';
        setTimeout(() => {
          button.innerHTML = originalText;
          button.style.backgroundColor = '';
        }, 2000);
      }
      };
      
      // 初始化
      console.log('开始初始化');
      updateDisplay();
      setupMagnifier();
      console.log('初始化完成');
    });
  </script>

  <style>
    /* 右侧推荐产品sticky定位样式 */
    .sticky {
      position: -webkit-sticky;
      position: sticky;
    }
    
    /* Affix 固定状态样式 */
    .affixed {
      border-radius: 8px;
      background: rgba(255, 255, 255, 0.98);
      backdrop-filter: blur(10px);
    }
    
    /* 移动端推荐产品处理 */
    @media (max-width: 1024px) {
      .sticky {
        position: static !important;
      }
      
      /* 移动端禁用affix */
      .affixed {
        position: static !important;
        box-shadow: none;
        background: white;
        backdrop-filter: none;
      }
    }
    
    /* 确保推荐产品在较小屏幕上正常显示 */
    @media (max-width: 768px) {
      .lg\\:grid-cols-4 {
        grid-template-columns: repeat(1, minmax(0, 1fr));
      }
    }

    .fwb{
      p{
        span{
          text-wrap-mode: wrap;
        }
      }
    }
    
    /* 放大镜样式优化 */
    #magnifierLens {
      border-radius: 50%;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
    }
    
    #magnifierZoom {
      border-radius: 8px;
      box-shadow: 0 10px 25px rgba(0,0,0,0.15);
    }
    
    /* 移动端隐藏放大镜 */
    @media (max-width: 1023px) {
      #magnifierLens,
      #magnifierZoom {
        display: none !important;
      }
    }
  </style>
